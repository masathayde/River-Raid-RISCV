DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00001217;   % 130: Main:					la 		tp,exceptionHandling	# carrega em tp o endereço base das rotinas do sistema ECALL %
00000001 : 8f820213;   % 130:  %
00000002 : 00521073;   % 131:  					csrrw 		zero,5,tp 		# seta utvec (reg 5) para o endereço tp %
00000003 : 0000e073;   % 132:  					csrrsi 		zero,0,1 		# seta o bit de habilitação de interrupção em ustatus (reg 0) %
00000004 : 0fc10297;   % 152: 					la		t0,	playerCrrSpr				 %
00000005 : 01028293;   % 152:  %
00000006 : 0fc11317;   % 153: 					la		t1,	Plyr_0					# Sprite do jogador padrão %
00000007 : e8830313;   % 153:  %
00000008 : 0062a023;   % 154: 					sw		t1,	0(t0)					# Salvando no espaço correto %
00000009 : 00600413;   % 157: 					li		s0,	6					# i = 6 %
0000000a : 06040463;   % 158: 	InitSetup.genMap:		beq		s0,	zero,	InitSetup.genMap.end		# (while i > 0) %
0000000b : 0fc10517;   % 160: 						la		a0,	blockCurrent			# Geração dos blocos no mapa	 %
0000000c : fef50513;   % 160:  %
0000000d : 0fc10597;   % 161: 						la		a1,	blockPrevious %
0000000e : fe858593;   % 161:  %
0000000f : 00000317;   % 162: 						call		createBlock %
00000010 : 338300e7;   % 162:  %
00000011 : 0fc10517;   % 164: 						la		a0,	playfield %
00000012 : ff050513;   % 164:  %
00000013 : 0fc10297;   % 165: 						la		t0,	pfWriteOffset %
00000014 : fe528293;   % 165:  %
00000015 : 0002c583;   % 166: 						lbu		a1,	0(t0) %
00000016 : 0fc10297;   % 167: 						la		t0,	blockCurrent %
00000017 : fc328293;   % 167:  %
00000018 : 0002c603;   % 168: 						lbu		a2,	0(t0) %
00000019 : 00000317;   % 169: 						call		writeBlockToPlayfield %
0000001a : 3b0300e7;   % 169:  %
0000001b : 0fc10297;   % 171: 						la		t0,	pfWriteOffset			# Atualizamos o offset de escrita %
0000001c : fc528293;   % 171:  %
0000001d : 0002c303;   % 172: 						lbu		t1,	0(t0) %
0000001e : 02030313;   % 173: 						addi		t1,	t1,	32 %
0000001f : 0c000393;   % 174: 						li		t2,	192 %
00000020 : 02737333;   % 175: 						remu		t1,	t1,	t2			# Wraparound %
00000021 : 00628023;   % 176: 						sb		t1,	0(t0) %
00000022 : fff40413;   % 179: 						addi		s0,	s0,	-1			# i-- %
00000023 : f9dff06f;   % 180: 						j		InitSetup.genMap %
00000024 : 00000013;   % 189: 	MainLoop:				nop # placeholder %
00000025 : 0fc10297;   % 193: 						la		t0,	gameTime			# Aqui salvaremos o tempo no começo do ciclo %
00000026 : f7428293;   % 193:  %
00000027 : 01e00893;   % 194: 						li		a7,	30				# Chamamos o ecall time %
00000028 : 00000073;   % 195: 						ecall						 %
00000029 : 00a2a023;   % 196: 						sw		a0,	0(t0)				# Salvamos em time %
0000002a : 0fc10297;   % 201: 	Render:					la		t0,	frameToShow			# Trocamos de frame %
0000002b : f6d28293;   % 201:  %
0000002c : 0fc10397;   % 202: 						la		t2,	framePtr			# Ponteiro para o frame no qual será desenhado o mapa %
0000002d : f5c38393;   % 202:  %
0000002e : 0002c303;   % 203: 						lbu		t1,	0(t0) %
0000002f : 00134313;   % 204: 						xori		t1,	t1,	1			# O uso de xor inverte o bit %
00000030 : 00628023;   % 205: 						sb		t1,	0(t0)				# Guardamos o valor de volta em frameToShow %
00000031 : ff000e37;   % 206: 						li		t3,	0xFF000000			# Inicialmente escolhemos o frame 0 %
00000032 : 000e0e13;   % 206:  %
00000033 : 00030663;   % 207: 						beq		t1,	zero,	Render.selectF0		# Mas é realmente o frame 0? %
00000034 : ff100e37;   % 208: 						li		t3,	0xFF100000			# Não, então escolhe-se frame 1						 %
00000035 : 000e0e13;   % 208:  %
00000036 : 01c3a023;   % 209: 	Render.selectF0:			sw		t3,	0(t2)				# Salvar em framePtr %
00000037 : 0fc10517;   % 212: 						la		a0,	playfield			# Carrega endereço do mapa %
00000038 : f5850513;   % 212:  %
00000039 : 0fc10297;   % 213: 						la		t0,	pfReadStartOffset		# Carrega posição de ínicio de leitura %
0000003a : f4e28293;   % 213:  %
0000003b : 0002c583;   % 214: 						lbu		a1,	0(t0) %
0000003c : 0fc10297;   % 215: 						la		t0,	pfReadEndOffset			# Carrega posição de final de leitura %
0000003d : f4328293;   % 215:  %
0000003e : 0002c603;   % 216: 						lbu		a2,	0(t0) %
0000003f : 0fc10297;   % 217: 						la		t0,	framePtr			# Endereço do frame a desenhar %
00000040 : f1028293;   % 217:  %
00000041 : 0002a683;   % 218: 						lw		a3,	0(t0) %
00000042 : 00000317;   % 219: 						call		renderPlayfield %
00000043 : 330300e7;   % 219:  %
00000044 : 0fc10297;   % 223: 						la		t0,	pfReadStartOffset		# Pegando o offset atual %
00000045 : f2228293;   % 223:  %
00000046 : 0002c303;   % 224: 						lbu		t1,	0(t0) %
00000047 : 0fc10397;   % 225: 						la		t2,	scrollSpeed			# Pegando velocidade de scroll %
00000048 : efa38393;   % 225:  %
00000049 : 0003ce03;   % 226: 						lbu		t3,	0(t2) %
0000004a : 01c30333;   % 227: 						add		t1,	t1,	t3			# Atualizando o offset em si %
0000004b : 0c000e93;   % 228: 						li		t4,	192				# Fazendo o wrap around (se o offset passar de 192, deve voltar ao começo) %
0000004c : 03d37333;   % 229: 						remu		t1,	t1,	t4 %
0000004d : 00628023;   % 230: 						sb		t1,	0(t0) %
0000004e : 0fc10297;   % 233: 						la		t0,	lineDrawnCounter %
0000004f : ee528293;   % 233:  %
00000050 : 0002c303;   % 234: 						lbu		t1,	(t0) %
00000051 : 0fc10397;   % 235: 						la		t2,	scrollSpeed %
00000052 : ed238393;   % 235:  %
00000053 : 0003ce03;   % 236: 						lbu		t3,	0(t2) %
00000054 : 01c30333;   % 237: 						add		t1,	t1,	t3 %
00000055 : 02000e93;   % 238: 						li		t4,	32 %
00000056 : 03d37f33;   % 239: 						remu		t5,	t1,	t4			# Resetamos o contador, mas com o número de linhas acima de 32 %
00000057 : 01e28023;   % 240: 						sb		t5,	0(t0)				# Armazenamos na memória o valor %
00000058 : 07d34063;   % 241: 						blt		t1,	t4,	NoNewBlock		# Se foram desenhadas menos de 32 linhas, nada a fazer %
00000059 : 0fc10517;   % 243: 						la		a0,	blockCurrent			# Geração do bloco novo %
0000005a : eb750513;   % 243:  %
0000005b : 0fc10597;   % 244: 						la		a1,	blockPrevious %
0000005c : eb058593;   % 244:  %
0000005d : 00000317;   % 245: 						call		createBlock %
0000005e : 200300e7;   % 245:  %
0000005f : 0fc10517;   % 247: 						la		a0,	playfield %
00000060 : eb850513;   % 247:  %
00000061 : 0fc10297;   % 248: 						la		t0,	pfWriteOffset %
00000062 : ead28293;   % 248:  %
00000063 : 0002c583;   % 249: 						lbu		a1,	0(t0) %
00000064 : 0fc10297;   % 250: 						la		t0,	blockCurrent %
00000065 : e8b28293;   % 250:  %
00000066 : 0002c603;   % 251: 						lbu		a2,	0(t0) %
00000067 : 00000317;   % 252: 						call		writeBlockToPlayfield %
00000068 : 278300e7;   % 252:  %
00000069 : 0fc10297;   % 254: 						la		t0,	pfWriteOffset			# Atualizamos o offset de escrita %
0000006a : e8d28293;   % 254:  %
0000006b : 0002c303;   % 255: 						lbu		t1,	0(t0) %
0000006c : 02030313;   % 256: 						addi		t1,	t1,	32 %
0000006d : 0c000393;   % 257: 						li		t2,	192 %
0000006e : 02737333;   % 258: 						remu		t1,	t1,	t2			# Wraparound %
0000006f : 00628023;   % 259: 						sb		t1,	0(t0)						 %
00000070 : 00000013;   % 260: 	NoNewBlock:				nop %
00000071 : 0fc10297;   % 273: 						la		t0, testObjY %
00000072 : 00828293;   % 273:  %
00000073 : 0002a303;   % 274: 						lw		t1, 0(t0) %
00000074 : 00430313;   % 275: 						addi		t1, t1,	4 %
00000075 : 0062a023;   % 276: 						sw		t1, 0(t0) %
00000076 : 07800513;   % 278: 						li		a0, 120 %
00000077 : 0fc10297;   % 279: 						la		t0, testObjY %
00000078 : ff028293;   % 279:  %
00000079 : 0002a583;   % 280: 						lw		a1, 0(t0) %
0000007a : 01400613;   % 282: 						li		a2, 20 %
0000007b : 01400693;   % 283: 						li		a3, 20 %
0000007c : 0fc11717;   % 284: 						la		a4, Plyr_1 %
0000007d : e4070713;   % 284:  %
0000007e : 0fc10297;   % 285: 						la		t0, framePtr %
0000007f : e1428293;   % 285:  %
00000080 : 0002a783;   % 286: 						lw		a5, 0(t0) %
00000081 : 00000813;   % 287: 						li		a6, 0 %
00000082 : 00000317;   % 288: 						call	drawObject %
00000083 : 370300e7;   % 288:  %
00000084 : 00a00513;   % 290: 						li		a0, 10 %
00000085 : 0fc10297;   % 291: 						la		t0, testObjY %
00000086 : fb828293;   % 291:  %
00000087 : 0002a583;   % 292: 						lw		a1, 0(t0) %
00000088 : 01400613;   % 294: 						li		a2, 20 %
00000089 : 01400693;   % 295: 						li		a3, 20 %
0000008a : 0fc11717;   % 296: 						la		a4, Plyr_1 %
0000008b : e0870713;   % 296:  %
0000008c : 0fc10297;   % 297: 						la		t0, framePtr %
0000008d : ddc28293;   % 297:  %
0000008e : 0002a783;   % 298: 						lw		a5, 0(t0) %
0000008f : 00100813;   % 299: 						li		a6, 1 %
00000090 : 00000317;   % 300: 						call	drawObject %
00000091 : 338300e7;   % 300:  %
00000092 : ff200537;   % 328: 						li		a0,	0xFF200200 %
00000093 : 20050513;   % 328:  %
00000094 : 00052b83;   % 329: 						lw		s7, 0(a0) #debug %
00000095 : ff2005b7;   % 330: 						li		a1,	0xFF200204 %
00000096 : 20458593;   % 330:  %
00000097 : 0005ac03;   % 331: 						lw		s8, 0(a1) # debug %
00000098 : 0fc10297;   % 333: 						la		t0,	playerSpeedX %
00000099 : dd028293;   % 333:  %
0000009a : 0002c603;   % 334: 						lbu		a2,	0(t0) %
0000009b : 0fc10697;   % 335: 						la		a3,	playerPosX %
0000009c : dbc68693;   % 335:  %
0000009d : 0fc10717;   % 336: 						la		a4,	playerDirection %
0000009e : db870713;   % 336:  %
0000009f : 0fc11797;   % 337: 						la		a5,	Plyr_0 %
000000a0 : c2478793;   % 337:  %
000000a1 : 0fc11817;   % 338: 						la		a6,	Plyr_1 %
000000a2 : dac80813;   % 338:  %
000000a3 : 0fc10897;   % 339: 						la		a7,	playerCrrSpr %
000000a4 : d9488893;   % 339:  %
000000a5 : 0fc10297;   % 340: 						la		t0,	Arg8 %
000000a6 : d6c28293;   % 340:  %
000000a7 : 0fc10317;   % 341: 						la		t1,	scrollSpeed %
000000a8 : d7a30313;   % 341:  %
000000a9 : 0062a023;   % 342: 						sw		t1,	0(t0) %
000000aa : 0fc10297;   % 343: 						la		t0, Arg9 %
000000ab : d5c28293;   % 343:  %
000000ac : ff200337;   % 344: 						li		t1,	0xFF20021C %
000000ad : 21c30313;   % 344:  %
000000ae : 0062a023;   % 345: 						sw		t1, 0(t0) %
000000af : 00000317;   % 346: 						call		getInputStick %
000000b0 : 54c300e7;   % 346:  %
000000b1 : 0fc10297;   % 351: 						la		t0,	playerPosX			# Carregando X do jogador %
000000b2 : d6428293;   % 351:  %
000000b3 : 0002d503;   % 352: 						lhu		a0,	0(t0) %
000000b4 : 0fc10297;   % 353: 						la		t0,	playerPosY			# Carregando Y do jogador %
000000b5 : d5b28293;   % 353:  %
000000b6 : 0002c583;   % 354: 						lbu		a1,	0(t0) %
000000b7 : 01400613;   % 355: 						li		a2,	20			# Carregando altura do sprite %
000000b8 : 01400693;   % 356: 						li		a3,	20			# Carregando largura %
000000b9 : 0fc10297;   % 357: 						la		t0,	playerCrrSpr %
000000ba : d3c28293;   % 357:  %
000000bb : 0002a703;   % 358: 						lw		a4,	0(t0)				# Pegando bitmap atual (normal ou virando para um lado) %
000000bc : 0fc10297;   % 359: 						la		t0, 	framePtr			# Pegando endereço do VGA atual %
000000bd : d1c28293;   % 359:  %
000000be : 0002a783;   % 360: 						lw		a5, 	0(t0) %
000000bf : 0fc10297;   % 361: 						la		t0,	playerDirection			# Carregando direção %
000000c0 : d3028293;   % 361:  %
000000c1 : 0002c803;   % 362: 						lbu		a6,	0(t0) %
000000c2 : 0fc10897;   % 363: 						la		a7,	playerCollision			# Endereço onde será salvo o byte de colisão %
000000c3 : d2788893;   % 363:  %
000000c4 : 00000317;   % 364: 						call		drawPlayerChkC												 %
000000c5 : 310300e7;   % 364:  %
000000c6 : 0fc10297;   % 376: 						la		t0,	frameToShow			# Terminamos de desenhar, então mostramos o frame %
000000c7 : cfd28293;   % 376:  %
000000c8 : 0002c303;   % 377: 						lbu		t1,	0(t0) %
000000c9 : ff2002b7;   % 378: 						li		t0,	0xFF200604 %
000000ca : 60428293;   % 378:  %
000000cb : 00628023;   % 379: 						sb		t1,	0(t0) %
000000cc : 00000013;   % 391: 	Wait:					nop %
000000cd : 0fc10297;   % 392: 						la		t0,	gameTime			# Recuperamos o tempo salvo no começo do ciclo %
000000ce : cd428293;   % 392:  %
000000cf : 0002a303;   % 393: 						lw		t1,	0(t0) %
000000d0 : 01e00893;   % 395: 						li		a7,	30				# Pegando o tempo novo %
000000d1 : 00000073;   % 396: 						ecall %
000000d2 : 40650333;   % 398: 						sub		t1,	a0,	t1			# Calculamos quanto tempo se passou %
000000d3 : 02100393;   % 399: 						li		t2,	33			 %
000000d4 : 406383b3;   % 400: 						sub		t2,	t2,	t1			# Calculamos quanto tempo a mais precisamos esperar %
000000d5 : 0003d463;   % 401: 						bge		t2,	zero,	Wait.noAdjust		# Caso tenha se passado mais tempo que o time step, corrigimos o valor de wait para zero %
000000d6 : 00000393;   % 402: 						li		t2,	0 %
000000d7 : 00700533;   % 403: 	Wait.noAdjust:				mv		a0,	t2				# Usamos o ecall para esperar o tempo calculado até o próximo ciclo %
000000d8 : 02000893;   % 404: 						li		a7,	32 %
000000d9 : 00000073;   % 405: 						ecall %
000000da : d29ff06f;   % 407: 						j		MainLoop				# Voltando ao ínicio %
000000db : 00a00893;   % 411: 						li		a7,	10				 %
000000dc : 00000073;   % 412: 						ecall	 %
000000dd : fec10113;   % 419: createBlock:				addi		sp,	sp,	-20				# Guardando registradores anteriores %
000000de : 00812023;   % 420: 					sw		s0,	0(sp) %
000000df : 00912223;   % 421: 					sw		s1,	4(sp) %
000000e0 : 01212423;   % 422: 					sw		s2,	8(sp) %
000000e1 : 01312623;   % 423: 					sw		s3,	12(sp) %
000000e2 : 01412823;   % 424: 					sw		s4,	16(sp) %
000000e3 : 00a00433;   % 426: 					mv		s0,	a0					# Salvando os valores para não serem alterados na ecall de RNG %
000000e4 : 00b004b3;   % 427: 					mv		s1,	a1 %
000000e5 : 00044f83;   % 429: 					lbu		t6,	0(s0)					# Carregamos ID do bloco atual, para criarmos o próximo					 %
000000e6 : 00f00293;   % 430: 					li		t0,	0x0000000f				# Bitmask para separar os números correspondentes à largura do rio do bloco anterior %
000000e7 : 005ff933;   % 431: 					and		s2,	t6,	t0				# Número de blocos de rio %
000000e8 : 0f000293;   % 432: 					li		t0,	0x000000f0				# Agora isolando o valor de blocos de terra %
000000e9 : 005ff9b3;   % 433: 					and 		s3,	t6,	t0				# Aplicação do bitmask %
000000ea : 0049d993;   % 434: 					srli		s3,	s3,	4				# Movendo os bits para a direita %
000000eb : 02900893;   % 438: 					li		a7,	41					# Gerando o número %
000000ec : 00000073;   % 439: 					ecall %
000000ed : 01390333;   % 440: 					add		t1,	s2,	s3				# a' deve estar em [0, a+b), para isso usamos a função mod %
000000ee : 02657a33;   % 441: 					remu		s4,	a0,	t1				# a' = random mod (a+b) %
000000ef : 00000073;   % 445: 					ecall								# a7 não foi alterado, pegamos novo aleatório %
000000f0 : 014005b3;   % 451: 					mv		a1,	s4					# a1 = a' %
000000f1 : 00000633;   % 452: 					mv		a2,	zero					# a2 = m = 0 %
000000f2 : 013a5663;   % 453: 					bge		s4,	s3,	createBlock.noAdjust		# Se a' >= a, pulamos %
000000f3 : 013005b3;   % 454: 					mv		a1,	s3					# a1 = a %
000000f4 : 41498633;   % 455: 					sub		a2,	s3,	s4				# m = a' - a %
000000f5 : 00700293;   % 456: 	createBlock.noAdjust:		li		t0,	7 %
000000f6 : 40b282b3;   % 457: 					sub		t0,	t0,	a1				# t0 = 7 - max(a', a) %
000000f7 : 02557533;   % 458: 					remu		a0,	a0,	t0				# a0 = R mod (7 - max(a', a)) %
000000f8 : 00c50533;   % 459: 					add		a0,	a0,	a2				# a0 += m %
000000f9 : 00150513;   % 460: 					addi		a0,	a0,	1				# a0++ ; Fórmula completa %
000000fa : 004a1a13;   % 463: 					slli		s4,	s4,	4				# Colocamos a borda esquerda na parte superior do byte %
000000fb : 01456533;   % 464: 					or		a0,	a0,	s4				# Juntando os dois valores					 %
000000fc : 01f48023;   % 465: 					sb		t6,	0(s1)					# Bloco atual se torna anterior %
000000fd : 00a40023;   % 466: 					sb		a0,	0(s0)					# Novo bloco gerado %
000000fe : 00012403;   % 468: 					lw		s0,	0(sp) %
000000ff : 00412483;   % 469: 					lw		s1,	4(sp) %
00000100 : 00812903;   % 470: 					lw		s2,	8(sp) %
00000101 : 00c12983;   % 471: 					lw		s3,	12(sp) %
00000102 : 01012a03;   % 472: 					lw		s4,	16(sp) %
00000103 : 01410113;   % 473: 					addi		sp,	sp,	20				# Desempilhar %
00000104 : 00008067;   % 475: 					ret %
00000105 : 00b50533;   % 484: writeBlockToPlayfield:			add		a0,	a0,	a1				# Adicionamos endereço ao offset, para acharmos o endereço de escrita %
00000106 : 00000293;   % 485: 					li		t0,	0					# t0 = i = 0 %
00000107 : 02000313;   % 486: 					li		t1,	32					# Vamos escrever 32 linhas					 %
00000108 : 00628a63;   % 487: 	writeBlockToPlayfield.L0:	beq		t0,	t1,	writeBlockToPlayfield.L0.end	# while (i < 32) %
00000109 : 00c50023;   % 489: 						sb		a2,	0(a0)				# Linha recebe o ID do bloco %
0000010a : 00150513;   % 490: 						addi		a0,	a0,	1			# Próximo bloco %
0000010b : 00128293;   % 491: 						addi		t0,	t0,	1			# i++ %
0000010c : ff1ff06f;   % 492: 						j		writeBlockToPlayfield.L0 %
0000010d : 00008067;   % 493: 	writeBlockToPlayfield.L0.end:	ret %
0000010e : 00000293;   % 505: renderPlayfield:			li		t0,	0					# i = 0 %
0000010f : 0a000313;   % 506: 					li		t1,	160					# Número de linhas a desenhar					 %
00000110 : 101017b7;   % 507: 					li		a5,	0x10101010 %
00000111 : 01078793;   % 507:  %
00000112 : b0b0b837;   % 508: 					li		a6,	0xb0b0b0b0 %
00000113 : 0b080813;   % 508:  %
00000114 : 00b505b3;   % 509: 					add		a1,	a0,	a1				# Começamos a ler o mapa daqui %
00000115 : 00c50633;   % 510: 					add		a2,	a0,	a2				# Aqui terminamos				 %
00000116 : 0e628c63;   % 511: 	renderPlayfield.drawLine:	beq		t0,	t1,	renderPlayfield.drawLine.end	# while (i < 160) %
00000117 : 00f6a023;   % 513: 						sw		a5,	0(a3)				# O primeiro segmento horizontal é sempre terra			 %
00000118 : 00f6a223;   % 514: 						sw		a5,	4(a3) %
00000119 : 00f6a423;   % 515: 						sw		a5,	8(a3) %
0000011a : 00f6a623;   % 516: 						sw		a5,	12(a3) %
0000011b : 00f6a823;   % 517: 						sw		a5,	16(a3) %
0000011c : 01468693;   % 518: 						addi		a3,	a3,	20			# Incrementamos o endereço da memória VGA %
0000011d : 0005c383;   % 520: 						lbu		t2,	0(a1)				# Pegando a ID da linha %
0000011e : 00f00e13;   % 521: 						li		t3,	0x0000000f			# Bitmask para separar os números correspondentes à largura do rio %
0000011f : 01c3fe33;   % 522: 						and		t3,	t2,	t3			# Borda direita  %
00000120 : 0f000e93;   % 523: 						li		t4,	0x000000f0 %
00000121 : 01d3feb3;   % 524: 						and		t4,	t2,	t4			# Borda esquerda %
00000122 : 004ede93;   % 525: 						srli		t4,	t4,	4 %
00000123 : 00000f13;   % 528: 						li		t5,	0				# j = 0 %
00000124 : 03df0263;   % 529: 	renderPlayfield.drawLeftBank:		beq		t5,	t4,	renderPlayfield.drawRiver %
00000125 : 00f6a023;   % 531: 							sw		a5,	0(a3)			# Pintando mais terra %
00000126 : 00f6a223;   % 532: 							sw		a5,	4(a3) %
00000127 : 00f6a423;   % 533: 							sw		a5,	8(a3) %
00000128 : 00f6a623;   % 534: 							sw		a5,	12(a3) %
00000129 : 00f6a823;   % 535: 							sw		a5,	16(a3)	 %
0000012a : 01468693;   % 536: 							addi		a3,	a3,	20 %
0000012b : 001f0f13;   % 537: 							addi		t5,	t5,	1		# j++ %
0000012c : fe1ff06f;   % 538: 							j		renderPlayfield.drawLeftBank %
0000012d : 00000f13;   % 540: 	renderPlayfield.drawRiver:		li		t5,	0				# j = 0 %
0000012e : 03cf0263;   % 541: 	renderPlayfield.drawRiverLoop:		beq		t5,	t3,	renderPlayfield.drawIsle %
0000012f : 0106a023;   % 543: 							sw		a6,	0(a3)			# Pintando rio %
00000130 : 0106a223;   % 544: 							sw		a6,	4(a3) %
00000131 : 0106a423;   % 545: 							sw		a6,	8(a3) %
00000132 : 0106a623;   % 546: 							sw		a6,	12(a3) %
00000133 : 0106a823;   % 547: 							sw		a6,	16(a3) %
00000134 : 01468693;   % 548: 							addi		a3,	a3,	20 %
00000135 : 001f0f13;   % 549: 							addi		t5,	t5,	1		# j++ %
00000136 : fe1ff06f;   % 550: 							j		renderPlayfield.drawRiverLoop %
00000137 : 00000f13;   % 552: 	renderPlayfield.drawIsle:		li		t5,	0				# j = 0 %
00000138 : 00700f93;   % 553: 						li		t6,	7				# Número restante de terra é igual 7 - a - b %
00000139 : 41cf8fb3;   % 554: 						sub		t6,	t6,	t3 %
0000013a : 41df8fb3;   % 555: 						sub		t6,	t6,	t4 %
0000013b : 03ff0263;   % 556: 	renderPlayfield.drawIsleLoop:		beq		t5,	t6,	renderPlayfield.mirror %
0000013c : 00f6a023;   % 558: 							sw		a5,	0(a3)			# Pintando mais terra %
0000013d : 00f6a223;   % 559: 							sw		a5,	4(a3) %
0000013e : 00f6a423;   % 560: 							sw		a5,	8(a3) %
0000013f : 00f6a623;   % 561: 							sw		a5,	12(a3) %
00000140 : 00f6a823;   % 562: 							sw		a5,	16(a3) %
00000141 : 01468693;   % 563: 							addi		a3,	a3,	20 %
00000142 : 001f0f13;   % 564: 							addi		t5,	t5,	1		# j++ %
00000143 : fe1ff06f;   % 565: 							j		renderPlayfield.drawIsleLoop %
00000144 : 00000f13;   % 567: 	renderPlayfield.mirror:			li		t5,	0 %
00000145 : 02800f93;   % 568: 						li		t6,	40				# Agora espelhamos a parte esquerda (40 partes de 4 pixels) %
00000146 : 00d008b3;   % 569: 						mv		a7,	a3				# a7 : parte esquerda, fazendo o caminho de volta, do meio até a ponta esquerda da linha %
00000147 : ffc88893;   % 570: 						addi		a7,	a7,	-4 %
00000148 : 01ff0e63;   % 571: 	renderPlayfield.mirrorLoop:		beq		t5,	t6,	renderPlayfield.drawLine.next # while ( j < 40)	 %
00000149 : 0008ae83;   % 573: 							lw		t4,	0(a7) %
0000014a : 01d6a023;   % 574: 							sw		t4,	0(a3) %
0000014b : ffc88893;   % 575: 							addi		a7,	a7,	-4 %
0000014c : 00468693;   % 576: 							addi		a3,	a3,	4 %
0000014d : 001f0f13;   % 577: 							addi		t5,	t5,	1		# j++ %
0000014e : fe9ff06f;   % 578: 							j		renderPlayfield.mirrorLoop %
0000014f : fff58593;   % 580: 	renderPlayfield.drawLine.next:		addi		a1,	a1,	-1			# Próxima linha. Lembrando que as linhas são lidas de baixo pra cima %
00000150 : 00a5d463;   % 581: 						bge		a1,	a0,	renderPlayfield.drawLine.noAdjust # Se sairmos do endereço do mapa, faz-se um "wrap-around" e volta-se ao fim do mapa %
00000151 : 0bf50593;   % 582: 						addi		a1,	a0,	191			# Último endereço do mapa (última linha) %
00000152 : 00128293;   % 583: 	renderPlayfield.drawLine.noAdjust:	addi		t0,	t0,	1											 %
00000153 : f0dff06f;   % 584: 						j		renderPlayfield.drawLine %
00000154 : 00002337;   % 587: 	renderPlayfield.drawLine.end:		li		t1,	6400				# Número de pedaços a pintar %
00000155 : 90030313;   % 587:  %
00000156 : 0b0b17b7;   % 588: 						li		a5,	0x0b0b0b0b	 %
00000157 : b0b78793;   % 588:  %
00000158 : 00030a63;   % 589: 	renderPlayfield.drawBottom:		beq		t1,	zero,	renderPlayfield.drawBottom.end %
00000159 : 00f6a023;   % 591: 							sw		a5,	0(a3) %
0000015a : 00468693;   % 592: 							addi		a3,	a3,	4 %
0000015b : fff30313;   % 593: 							addi		t1,	t1,	-1 %
0000015c : ff1ff06f;   % 594: 							j		renderPlayfield.drawBottom %
0000015d : 00008067;   % 596: 	renderPlayfield.drawBottom.end:	ret %
0000015e : 0a05c263;   % 612: drawObject:				blt		a1,	zero,	drawObject.finish 	# Se Y < 0, objeto não é visível %
0000015f : 0a000293;   % 613: 					li		t0,	160				# Número máximo de linhas visíveis %
00000160 : 40c58333;   % 614: 					sub		t1,	a1,	a2			# t1 = coordenada do topo do objeto %
00000161 : 0862cc63;   % 615: 					bgt		t1,	t0,	drawObject.finish	# Se o topo estiver acima de 160, objeto não é visível %
00000162 : 08060a63;   % 617: 	drawObject.start:		beq		a2,	zero,	drawObject.finish		# while (height > 0 ) %
00000163 : 14000293;   % 620: 						li		t0,	320 %
00000164 : 025582b3;   % 621: 						mul		t0,	a1,	t0			# Y*320 %
00000165 : 00a282b3;   % 622: 						add		t0,	t0,	a0			# t0 = Y*320 + X %
00000166 : 00f282b3;   % 623: 						add		t0,	t0,	a5			# VGAStart + t0 é o endereço		 %
00000167 : 00d00fb3;   % 625: 						mv		t6,	a3				# t6 = j = largura do objeto %
00000168 : 00080863;   % 626: 						beq		a6,	zero, drawObject.drawLine	# Se for para inverter o sprite, executamos as próximas instruções %
00000169 : 00d70733;   % 627: 						add		a4,	a4,	a3			# Pegamos o endereço do final da linha %
0000016a : fff70713;   % 628: 						addi		a4,	a4,	-1 %
0000016b : 0300006f;   % 629: 						j		drawObject.drawLineF			# Pulamos para o loop de desenho invertido de linha					 %
0000016c : 060f8063;   % 630: 	drawObject.drawLine:			beq		t6,	zero,	drawObject.drawLine.end # while (j > 0 ) %
0000016d : 0a000f13;   % 632: 							li		t5,	160 %
0000016e : 00bf6a63;   % 633: 							bgtu		a1,	t5,	drawObject.noDraw # Fazemos o teste de visibilidade linha a linha para um desaparecimento suave %
0000016f : 00074303;   % 635: 							lbu		t1,	0(a4)			# Pegamos o primeiro byte do bitmap do objeto %
00000170 : 0b000393;   % 636: 							li		t2,	0xb0			# Transparência %
00000171 : 00730463;   % 637: 							beq		t1,	t2,	drawObject.noDraw # Se a cor for igual a do rio, então não pintamos							 %
00000172 : 00628023;   % 638: 							sb		t1,	0(t0)			# Desenhamos na tela %
00000173 : 00170713;   % 639: 	drawObject.noDraw:				addi		a4,	a4,	1		# Passamos para o próximo byte %
00000174 : 00128293;   % 641: 							addi		t0,	t0,	1		# Próximo endereço de pintura %
00000175 : ffff8f93;   % 642: 							addi		t6,	t6,	-1		# j-- %
00000176 : fd9ff06f;   % 643: 							j		drawObject.drawLine %
00000177 : 020f8663;   % 646: 	drawObject.drawLineF:			beq		t6,	zero,	drawObject.drawLineF.end # while (j > 0 ) %
00000178 : 0a000f13;   % 648: 							li		t5,	160 %
00000179 : 00bf6a63;   % 649: 							bgtu		a1,	t5,	drawObject.noDrawF # Fazemos o teste de visibilidade linha a linha para um desaparecimento suave %
0000017a : 00074303;   % 651: 							lbu		t1,	0(a4)			# Pegamos o primeiro byte do bitmap do objeto %
0000017b : 0b000393;   % 652: 							li		t2,	0xb0			# Transparência %
0000017c : 00730463;   % 653: 							beq		t1,	t2,	drawObject.noDrawF # Se a cor for igual a do rio, então não pintamos							 %
0000017d : 00628023;   % 654: 							sb		t1,	0(t0)			# Desenhamos na tela %
0000017e : fff70713;   % 655: 	drawObject.noDrawF:				addi		a4,	a4,	-1		# Passamos para o próximo byte %
0000017f : 00128293;   % 657: 							addi		t0,	t0,	1		# Próximo endereço de pintura %
00000180 : ffff8f93;   % 658: 							addi		t6,	t6,	-1		# j-- %
00000181 : fd9ff06f;   % 659: 							j		drawObject.drawLineF						 %
00000182 : 00d70733;   % 662: 	drawObject.drawLineF.end:		add		a4,	a4,	a3			# Ajustando o endereço do bitmap, após desenho de linha invertido %
00000183 : 00170713;   % 663: 						addi		a4,	a4,	1 %
00000184 : fff58593;   % 664: 	drawObject.drawLine.end:		addi		a1,	a1,	-1			# (Y--): Passamos para a próxima linha do objeto								 %
00000185 : fff60613;   % 665: 						addi		a2,	a2,	-1			# height-- %
00000186 : f71ff06f;   % 666: 						j		drawObject.start			# Se estiver como esperado, a4 já deve estar com o endereço certo %
00000187 : 00008067;   % 668: 	drawObject.finish:		ret %
00000188 : ffc10113;   % 685: drawPlayerChkC:				addi		sp,	sp,	-4 %
00000189 : 00812023;   % 686: 					sw		s0,	0(sp)			 %
0000018a : 0e060a63;   % 688: 	drawPlayerChkC.start:		beq		a2,	zero,	drawPlayerChkC.finish				# while (height > 0 ) %
0000018b : 14000293;   % 691: 						li		t0,	320 %
0000018c : 025582b3;   % 692: 						mul		t0,	a1,	t0				# Y*320 %
0000018d : 00a282b3;   % 693: 						add		t0,	t0,	a0				# t0 = Y*320 + X %
0000018e : 00f282b3;   % 694: 						add		t0,	t0,	a5				# VGAStart + t0 é o endereço		 %
0000018f : 00d00fb3;   % 696: 						mv		t6,	a3					# t6 = j = largura do objeto %
00000190 : 00080863;   % 697: 						beq		a6,	zero, drawPlayerChkC.drawLine		# Se for para inverter o sprite, executamos as próximas instruções %
00000191 : 00d70733;   % 698: 						add		a4,	a4,	a3				# Pegamos o endereço do final da linha %
00000192 : fff70713;   % 699: 						addi		a4,	a4,	-1 %
00000193 : 0600006f;   % 700: 						j		drawPlayerChkC.drawLineF			# Pulamos para o loop de desenho invertido de linha					 %
00000194 : 0c0f8063;   % 701: 	drawPlayerChkC.drawLine:		beq		t6,	zero,	drawPlayerChkC.drawLine.end 	# while (j > 0 ) %
00000195 : 00074303;   % 704: 							lbu		t1,	0(a4)				# Pegamos o primeiro byte do bitmap do objeto %
00000196 : 0b000f13;   % 705: 							li		t5,	0xb0				# Cor do rio (nessa rotina, ignoramos os bytes com essa cor para o propósito de colisão %
00000197 : 05e30063;   % 706: 							beq		t1,	t5,	drawPlayerChkC.noDraw 	# Assim, ignoramos o teste de colisão %
00000198 : 0002ce83;   % 707: 							lbu		t4,	0(t0)				# Recebe a cor do background naquele ponto %
00000199 : 03ee8a63;   % 708: 							beq		t4,	t5,	drawPlayerChkC.noColl 	# Se é rio, não fazemos nada %
0000019a : 0ff00f13;   % 709: 							li		t5,	0xFF %
0000019b : 03ee8663;   % 710: 							beq		t4,	t5,	drawPlayerChkC.noColl 	# Se for explosão, também não fazemos nada %
0000019c : 02600f13;   % 711: 							li		t5,	0x26 %
0000019d : 01ee9663;   % 712: 							bne		t4,	t5,	drawPlayerChkC.chkLeuf 	# Checamos se é combústivel %
0000019e : 00200413;   % 713: 							li		s0,	2				# Guardamos o tipo de colisão em s0 %
0000019f : 01c0006f;   % 714: 							j		drawPlayerChkC.noColl			# Procedendo ao desenho %
000001a0 : 06200f13;   % 715: 	drawPlayerChkC.chkLeuf:				li		t5,	0x62 %
000001a1 : 01ee9663;   % 716: 							bne		t4,	t5,	drawPlayerChkC.boom	# Checamos se é combústivel ruim %
000001a2 : 00300413;   % 717: 							li		s0,	3				# Guardamos em s0 %
000001a3 : 00c0006f;   % 718: 							j		drawPlayerChkC.noColl			# Procedendo ao desenho %
000001a4 : 00100413;   % 719: 	drawPlayerChkC.boom:				li		s0,	1				# Se não for nenhuma dos casos anteriores, então é colisão fatal %
000001a5 : 0880006f;   % 720: 							j		drawPlayerChkC.finish			# Cancelamos o desenho aqui mesmo						 %
000001a6 : 00628023;   % 722: 	drawPlayerChkC.noColl:				sb		t1,	0(t0)				# Desenhamos na tela %
000001a7 : 00170713;   % 723: 	drawPlayerChkC.noDraw:				addi		a4,	a4,	1			# Passamos para o próximo byte %
000001a8 : 00128293;   % 725: 							addi		t0,	t0,	1			# Próximo endereço de pintura %
000001a9 : ffff8f93;   % 726: 							addi		t6,	t6,	-1			# j-- %
000001aa : fa9ff06f;   % 727: 							j		drawPlayerChkC.drawLine %
000001ab : 040f8e63;   % 730: 	drawPlayerChkC.drawLineF:		beq		t6,	zero,	drawPlayerChkC.drawLineF.end # while (j > 0 ) %
000001ac : 00074303;   % 733: 							lbu		t1,	0(a4)				# Pegamos o primeiro byte do bitmap do objeto %
000001ad : 0b000f13;   % 734: 							li		t5,	0xb0				# Cor do rio (nessa rotina, ignoramos os bytes com essa cor para o propósito de colisão %
000001ae : 05e30063;   % 735: 							beq		t1,	t5,	drawPlayerChkC.noDrawF 	# Assim, ignoramos o teste de colisão %
000001af : 0002ce83;   % 736: 							lbu		t4,	0(t0)				# Recebe a cor do background naquele ponto %
000001b0 : 03ee8a63;   % 737: 							beq		t4,	t5,	drawPlayerChkC.noCollF 	# Se é rio, não fazemos nada %
000001b1 : 0ff00f13;   % 738: 							li		t5,	0xFF %
000001b2 : 03ee8663;   % 739: 							beq		t4,	t5,	drawPlayerChkC.noCollF 	# Se for explosão, também não fazemos nada %
000001b3 : 02600f13;   % 740: 							li		t5,	0x26 %
000001b4 : 01ee9663;   % 741: 							bne		t4,	t5,	drawPlayerChkC.chkLeufF # Checamos se é combústivel %
000001b5 : 00200413;   % 742: 							li		s0,	2				# Guardamos o tipo de colisão em s0 %
000001b6 : 01c0006f;   % 743: 							j		drawPlayerChkC.noCollF			# Procedendo ao desenho %
000001b7 : 06200f13;   % 744: 	drawPlayerChkC.chkLeufF:			li		t5,	0x62 %
000001b8 : 01ee9663;   % 745: 							bne		t4,	t5,	drawPlayerChkC.boomF	# Checamos se é combústivel ruim %
000001b9 : 00300413;   % 746: 							li		s0,	3				# Guardamos em s0 %
000001ba : 00c0006f;   % 747: 							j		drawPlayerChkC.noCollF			# Procedendo ao desenho %
000001bb : 00100413;   % 748: 	drawPlayerChkC.boomF:				li		s0,	1				# Se não for nenhuma dos casos anteriores, então é colisão fatal %
000001bc : 02c0006f;   % 749: 							j		drawPlayerChkC.finish			# Cancelamos o desenho aqui mesmo %
000001bd : 00628023;   % 751: 	drawPlayerChkC.noCollF:				sb		t1,	0(t0)			# Desenhamos na tela %
000001be : fff70713;   % 752: 	drawPlayerChkC.noDrawF:				addi		a4,	a4,	-1		# Passamos para o próximo byte %
000001bf : 00128293;   % 754: 							addi		t0,	t0,	1		# Próximo endereço de pintura %
000001c0 : ffff8f93;   % 755: 							addi		t6,	t6,	-1		# j-- %
000001c1 : fa9ff06f;   % 756: 							j		drawPlayerChkC.drawLineF						 %
000001c2 : 00d70733;   % 759: 	drawPlayerChkC.drawLineF.end:		add		a4,	a4,	a3			# Ajustando o endereço do bitmap, após desenho de linha invertido %
000001c3 : 00170713;   % 760: 						addi		a4,	a4,	1 %
000001c4 : fff58593;   % 761: 	drawPlayerChkC.drawLine.end:		addi		a1,	a1,	-1			# (Y--): Passamos para a próxima linha do objeto								 %
000001c5 : fff60613;   % 762: 						addi		a2,	a2,	-1			# height-- %
000001c6 : f11ff06f;   % 763: 						j		drawPlayerChkC.start			# Se estiver como esperado, a4 já deve estar com o endereço certo %
000001c7 : 00888023;   % 765: 	drawPlayerChkC.finish:		sb		s0,	0(a7)					# Salvamos o tipo de colisão no endereço %
000001c8 : 00012403;   % 766: 					lw		s0,	0(sp) %
000001c9 : 00410113;   % 767: 					addi		sp,	sp,	4 %
000001ca : 00008067;   % 768: 					ret %
000001cb : 00052283;   % 783: getInputRars:				lw		t0,	0(a0)					# Pegamos o bit de controle %
000001cc : 0012f293;   % 784: 					andi		t0,	t0,	1				# Aplicando bitmask %
000001cd : 0a028863;   % 785: 					beq		t0,	zero,	getInputRars.noMove		# Se t0 == 0, não há input novo %
000001ce : 0005a283;   % 786: 					lw		t0,	0(a1)					# Há input novo, então o guardamos %
000001cf : 06100313;   % 789: 					li		t1,	97 %
000001d0 : 02629463;   % 790: 					bne		t0,	t1,	getInputRars.testRight		# Testamos se é a direção esquerda %
000001d1 : 0006d383;   % 791: 					lhu		t2,	0(a3)					# Pegamos a posição X %
000001d2 : fff00313;   % 792: 					li		t1,	-1 %
000001d3 : 02c30333;   % 793: 					mul		t1,	t1,	a2				# Esquerda significa reduzir a coordenada X, então invertemos a velocidade %
000001d4 : 006383b3;   % 794: 					add		t2,	t2,	t1				# Atualizamos a posição X %
000001d5 : 00769023;   % 795: 					sh		t2,	0(a3)					# Guardamos no endereço certo %
000001d6 : 00100313;   % 796: 					li		t1,	1					# 1 = esquerda %
000001d7 : 00670023;   % 797: 					sb		t1,	0(a4)					# Atualizamos a direção %
000001d8 : 0108a023;   % 798: 					sw		a6,	0(a7)					# Atualizamos o sprite %
000001d9 : 0a00006f;   % 799: 					j		getInputRars.end				 %
000001da : 06400313;   % 801: 	getInputRars.testRight:		li		t1,	100 %
000001db : 02629063;   % 802: 					bne		t0,	t1,	getInputRars.testUp		# Testamos se é a direção direita %
000001dc : 0006d383;   % 803: 					lhu		t2,	0(a3)					# Pegamos a posição X %
000001dd : 00c383b3;   % 804: 					add		t2,	t2,	a2				# Atualizamos a posição %
000001de : 00769023;   % 805: 					sh		t2,	0(a3)					# Guardamos no endereço certo %
000001df : 00000313;   % 806: 					li		t1,	0					# 0 = direita %
000001e0 : 00670023;   % 807: 					sb		t1,	0(a4)					# Atualizamos a direção %
000001e1 : 0108a023;   % 808: 					sw		a6,	0(a7)					# Atualizamos o sprite %
000001e2 : 07c0006f;   % 809: 					j		getInputRars.end %
000001e3 : 07700313;   % 811: 	getInputRars.testUp:		li		t1,	119 %
000001e4 : 02629463;   % 812: 					bne		t0,	t1,	getInputRars.testDown		# Testamos se é cima %
000001e5 : 0fc10317;   % 813: 					la		t1,	scrollSpeedFast				# Pegamos o valor da velocidade no nível devagar %
000001e6 : 88430313;   % 813:  %
000001e7 : 00034383;   % 814: 					lbu		t2,	0(t1) %
000001e8 : 0fc10317;   % 815: 					la		t1,	Arg8 %
000001e9 : 86030313;   % 815:  %
000001ea : 00032e03;   % 816: 					lw		t3,	0(t1)					# Pegamos o endereço onde está a velocidade de scroll da tela %
000001eb : 007e0023;   % 817: 					sb		t2,	0(t3)					# Atualizamos a velocidade %
000001ec : 00f8a023;   % 818: 					sw		a5,	0(a7) %
000001ed : 0500006f;   % 819: 					j		getInputRars.end %
000001ee : 07300313;   % 821: 	getInputRars.testDown:		li		t1,	115 %
000001ef : 02629463;   % 822: 					bne		t0,	t1,	getInputRars.noMove		# Testamos se é baixo %
000001f0 : 0fc10317;   % 823: 					la		t1,	scrollSpeedSlow				# Pegamos o valor da velocidade no nível rápido %
000001f1 : 85930313;   % 823:  %
000001f2 : 00034383;   % 824: 					lbu		t2,	0(t1) %
000001f3 : 0fc10317;   % 825: 					la		t1,	Arg8					# Pegamos o endereço onde está a velocidade de scroll da tela %
000001f4 : 83430313;   % 825:  %
000001f5 : 00032e03;   % 826: 					lw		t3,	0(t1)					# %
000001f6 : 007e0023;   % 827: 					sb		t2,	0(t3)					# Atualizamos a velocidade %
000001f7 : 00f8a023;   % 828: 					sw		a5,	0(a7) %
000001f8 : 0240006f;   % 829: 					j		getInputRars.end %
000001f9 : 00f8a023;   % 831: 	getInputRars.noMove:		sw		a5,	0(a7)					# Como não houve movimento, o sprite padrão é usado %
000001fa : 0fc10317;   % 832: 					la		t1,	Arg8					# Pegamos o endereço.. %
000001fb : 81830313;   % 832:  %
000001fc : 00032383;   % 833: 					lw		t2,	0(t1)					# ..do scroll vertical %
000001fd : 0fc10e17;   % 834: 					la		t3,	scrollSpeedNormal			# Pegamos o valor da velocidade padrão %
000001fe : 823e0e13;   % 834:  %
000001ff : 000e4e83;   % 835: 					lbu		t4, 	0(t3)					#  %
00000200 : 01d38023;   % 836: 					sb		t4,	0(t2)					# Atualizamos (Isso é feito se não houver nenhum input novo) %
00000201 : 00008067;   % 838: 	getInputRars.end:		ret %
00000202 : 00f8a023;   % 853: getInputStick:				sw		a5,	0(a7)					# Começamos com o sprite padrão. Só será mudado se houver movimento %
00000203 : 0fc0f317;   % 854: 					la		t1,	Arg8					# Pegamos o endereço.. %
00000204 : 7f430313;   % 854:  %
00000205 : 00032383;   % 855: 					lw		t2,	0(t1)					# ..do scroll vertical %
00000206 : 0fc0fe17;   % 856: 					la		t3,	scrollSpeedNormal			# Pegamos o valor da velocidade padrão %
00000207 : 7ffe0e13;   % 856:  %
00000208 : 000e4e83;   % 857: 					lbu		t4, 	0(t3)					#  %
00000209 : 01d38023;   % 858: 					sb		t4,	0(t2)					# Caso nada mude, sempre voltamos à velocidade padrão %
0000020a : 00052283;   % 860: 					lw		t0,	0(a0)					# Pegamos o valor do eixo X %
0000020b : 0005a303;   % 861: 					lw		t1, 0(a1)					# Pegamos o valor do eixo Y %
0000020c : 19000313;   % 864: 					li		t1,	400					# Valor do deadzone em direção a zero %
0000020d : 0262d063;   % 865: 					bge		t0,	t1,	getInputStick.testXp		# Se for maior, o jogador não está indo nessa direção %
0000020e : 0006d383;   % 867: 					lhu		t2,	0(a3)					# Pegamos a posição X do jogador %
0000020f : 00c383b3;   % 868: 					add		t2,	t2,	a2				# Atualizamos a posição %
00000210 : 00769023;   % 869: 					sh		t2,	0(a3)					# Guardamos no endereço certo %
00000211 : 00000313;   % 870: 					li		t1,	0					# 0 = direita %
00000212 : 00670023;   % 871: 					sb		t1,	0(a4)					# Atualizamos a direção %
00000213 : 0108a023;   % 872: 					sw		a6,	0(a7)					# Atualizamos o sprite %
00000214 : 0300006f;   % 873: 					j		getInputStick.testYm %
00000215 : 00001337;   % 875: 	getInputStick.testXp:		li		t1,	3695					# Valor do deadzone em direção a 1023	 %
00000216 : e6f30313;   % 875:  %
00000217 : 02535263;   % 876: 					ble		t0,	t1,	getInputStick.testYm		# Se for menor, o jogador não está indo nessa direção %
00000218 : 0006d383;   % 878: 					lhu		t2,	0(a3)					# Pegamos a posição X do jogador %
00000219 : fff00313;   % 879: 					li		t1,	-1 %
0000021a : 02c30333;   % 880: 					mul		t1,	t1,	a2				# Esquerda significa reduzir a coordenada X, então invertemos a velocidade %
0000021b : 006383b3;   % 881: 					add		t2,	t2,	t1				# Atualizamos a posição X %
0000021c : 00769023;   % 882: 					sh		t2,	0(a3)					# Guardamos no endereço certo %
0000021d : 00100313;   % 883: 					li		t1,	1					# 1 = esquerda %
0000021e : 00670023;   % 884: 					sb		t1,	0(a4)					# Atualizamos a direção %
0000021f : 0108a023;   % 885: 					sw		a6,	0(a7)					# Atualizamos o sprite %
00000220 : 0005a283;   % 887: 	getInputStick.testYm:		lw		t0,	0(a1)					# Pegamos o valor do eixo Y %
00000221 : 19000313;   % 888: 					li		t1,	400					# Valor do deadzone em direção a zero %
00000222 : 0262d463;   % 889: 					bge		t0,	t1,	getInputStick.testYp		# Se for maior, não está indo nessa direção %
00000223 : 0fc0f317;   % 891: 					la		t1,	scrollSpeedSlow				# Pegamos o valor da velocidade no nível rápido %
00000224 : 78d30313;   % 891:  %
00000225 : 00034383;   % 892: 					lbu		t2,	0(t1) %
00000226 : 0fc0f317;   % 893: 					la		t1,	Arg8					# Pegamos o endereço onde está a velocidade de scroll da tela %
00000227 : 76830313;   % 893:  %
00000228 : 00032e03;   % 894: 					lw		t3,	0(t1)					# %
00000229 : 007e0023;   % 895: 					sb		t2,	0(t3)					# Atualizamos a velocidade %
0000022a : 00f8a023;   % 896: 					sw		a5,	0(a7)					# Usa o sprite padrão %
0000022b : 0300006f;   % 897: 					j		getInputStick.testButton %
0000022c : 00001337;   % 899: 	getInputStick.testYp:		li		t1,	3695					# Deadzone em direção a 1023 %
0000022d : e6f30313;   % 899:  %
0000022e : 02535263;   % 900: 					ble		t0,	t1,	getInputStick.testButton	# Se for menor, não está indo nessa direção %
0000022f : 0fc0f317;   % 901: 					la		t1,	scrollSpeedFast				# Pegamos o valor da velocidade no nível devagar %
00000230 : 75c30313;   % 901:  %
00000231 : 00034383;   % 902: 					lbu		t2,	0(t1) %
00000232 : 0fc0f317;   % 903: 					la		t1,	Arg8 %
00000233 : 73830313;   % 903:  %
00000234 : 00032e03;   % 904: 					lw		t3,	0(t1)					# Pegamos o endereço onde está a velocidade de scroll da tela %
00000235 : 007e0023;   % 905: 					sb		t2,	0(t3)					# Atualizamos a velocidade %
00000236 : 00f8a023;   % 906: 					sw		a5,	0(a7)					# Usa o sprite padrão %
00000237 : 0fc0f297;   % 908: 	getInputStick.testButton:	la		t0,	Arg9					# Pegamos o endereço do botão %
00000238 : 72828293;   % 908:  %
00000239 : 0002a303;   % 909: 					lw		t1,	0(t0) %
0000023a : 00032383;   % 910: 					lw		t2,	0(t1)					# Pegamos o valor no endereço %
0000023b : 00039263;   % 911: 					bne		t2,	zero,	getInputStick.end		# O botão é ativo em zero %
0000023c : 00008067;   % 914: 	getInputStick.end:		ret %
0000023d : 0420d073;   % 165: 	csrrwi zero,66,1	# caso ocorra dropdown vai gerar exceção de instrução inválida %
0000023e : ff810113;   % 167: exceptionHandling:	addi 	sp, sp, -8 	# salva 2 registradores utilizados para comparar ucause %
0000023f : 00512023;   % 168: 	sw 	t0, 0(sp) %
00000240 : 01a12223;   % 169: 	sw 	s10, 4(sp) %
00000241 : 04201d73;   % 171: 	csrrw 	s10, 66, zero 			# le o ucause e salva em s10 %
00000242 : 00800293;   % 173: 	li 	t0, 8 %
00000243 : 01a29a63;   % 174: 	bne 	t0, s10, errorExceptions  	# Não é ecall - nem precisa arrumar a pilha! %
00000244 : 00012283;   % 176: 	lw 	t0, 0(sp)			# É ecall %
00000245 : 00412d03;   % 177:     	lw 	s10, 4(sp)  			# recupera registradores usados %
00000246 : 00810113;   % 178:     	addi 	sp, sp, 8			 %
00000247 : 1e00006f;   % 179: 	j 	ecallException %
00000248 : 04301df3;   % 185: errorExceptions: csrrw 	s11, 67, zero 	# le o utval da exceção e salva em s11	 %
00000249 : 0c000513;   % 186: 	addi 	a0, zero, 0xc0 		## printa tela de azul %
0000024a : 00000593;   % 187: 	addi 	a1, zero, 0 %
0000024b : 09400893;   % 188: 	addi 	a7, zero, 148 %
0000024c : 77d000ef;   % 189: 	jal 	clsCLS %
0000024d : 00000293;   % 192: End_Cause0:	li 	t0, 0 %
0000024e : 03a29263;   % 193: 		bne 	t0, s10, End_Cause1 %
0000024f : 0fc11517;   % 194: 		la 	a0, Cause0 %
00000250 : ef050513;   % 194:  %
00000251 : 00000593;   % 195: 		li 	a1, 0 %
00000252 : 00100613;   % 196: 		li 	a2, 1 %
00000253 : 0000c6b7;   % 197: 		li 	a3, 0x0000c0ff %
00000254 : 0ff68693;   % 197:  %
00000255 : 680000ef;   % 198: 		jal	printString %
00000256 : 16c0006f;   % 199: 		j	End_uepc %
00000257 : 00100293;   % 202: End_Cause1:	li 	t0, 1 %
00000258 : 03a29263;   % 203: 		bne 	t0, s10, End_Cause2 %
00000259 : 0fc11517;   % 204: 		la 	a0, Cause1 %
0000025a : ef150513;   % 204:  %
0000025b : 00000593;   % 205: 		li 	a1, 0 %
0000025c : 00100613;   % 206: 		li 	a2, 1 %
0000025d : 0000c6b7;   % 207: 		li 	a3, 0x0000c0ff %
0000025e : 0ff68693;   % 207:  %
0000025f : 658000ef;   % 208: 		jal 	printString	 %
00000260 : 1440006f;   % 209: 		j	End_uepc %
00000261 : 00200293;   % 212: End_Cause2:	li 	t0, 2 %
00000262 : 03a29663;   % 213: 		bne 	t0, s10, End_Cause4 %
00000263 : 0fc11517;   % 214: 		la 	a0, Cause2 %
00000264 : eec50513;   % 214:  %
00000265 : 00000593;   % 215: 		li 	a1, 0 %
00000266 : 00100613;   % 216: 		li 	a2, 1 %
00000267 : 0000c6b7;   % 217: 		li 	a3, 0x0000c0ff %
00000268 : 0ff68693;   % 217:  %
00000269 : 630000ef;   % 218: 		jal 	printString %
0000026a : 0fc11517;   % 220: 		la 	a0, Instr %
0000026b : f8850513;   % 220:  %
0000026c : 0e80006f;   % 221: 		j	End_utval %
0000026d : 00400293;   % 224: End_Cause4:	addi 	t0, zero, 4 %
0000026e : 03a29663;   % 225: 		bne	t0, s10, End_Cause5 %
0000026f : 0fc11517;   % 226: 		la 	a0, Cause4 %
00000270 : ed950513;   % 226:  %
00000271 : 00000593;   % 227: 		li 	a1, 0 %
00000272 : 00100613;   % 228: 		li 	a2, 1 %
00000273 : 0000c6b7;   % 229: 		li 	a3, 0x0000c0ff %
00000274 : 0ff68693;   % 229:  %
00000275 : 600000ef;   % 230: 		jal	printString %
00000276 : 0fc11517;   % 232: 		la 	a0, Addrs %
00000277 : f5050513;   % 232:  %
00000278 : 0b80006f;   % 233: 		j	End_utval %
00000279 : 00500293;   % 236: End_Cause5:	li 	t0, 5 %
0000027a : 03a29663;   % 237: 		bne 	t0, s10, End_Cause6 %
0000027b : 0fc11517;   % 238: 		la 	a0, Cause5 %
0000027c : ecb50513;   % 238:  %
0000027d : 00000593;   % 239: 		li 	a1, 0 %
0000027e : 00100613;   % 240: 		li 	a2, 1 %
0000027f : 0000c6b7;   % 241: 		li 	a3, 0x0000c0ff %
00000280 : 0ff68693;   % 241:  %
00000281 : 5d0000ef;   % 242: 		jal 	printString	 %
00000282 : 0fc11517;   % 244: 		la 	a0, Addrs %
00000283 : f2050513;   % 244:  %
00000284 : 0880006f;   % 245: 		j	End_utval %
00000285 : 00600293;   % 248: End_Cause6:	li 	t0, 6 %
00000286 : 03a29663;   % 249: 		bne 	t0, s10, End_Cause7 %
00000287 : 0fc11517;   % 250: 		la 	a0, Cause6 %
00000288 : eb750513;   % 250:  %
00000289 : 00000593;   % 251: 		li 	a1, 0 %
0000028a : 00100613;   % 252: 		li 	a2, 1 %
0000028b : 0000c6b7;   % 253: 		li 	a3, 0x0000c0ff %
0000028c : 0ff68693;   % 253:  %
0000028d : 5a0000ef;   % 254: 		jal 	printString %
0000028e : 0fc11517;   % 256: 		la 	a0, Addrs %
0000028f : ef050513;   % 256:  %
00000290 : 0580006f;   % 257: 		j	End_utval %
00000291 : 00700293;   % 260: End_Cause7:	li 	t0, 7 %
00000292 : 03a29663;   % 261: 		bne 	t0, s10, End_CauseD %
00000293 : 0fc11517;   % 262: 		la 	a0, Cause7 %
00000294 : eaa50513;   % 262:  %
00000295 : 00000593;   % 263: 		li 	a1, 0 %
00000296 : 00100613;   % 264: 		li 	a2, 1 %
00000297 : 0000c6b7;   % 265: 		li 	a3, 0x0000c0ff %
00000298 : 0ff68693;   % 265:  %
00000299 : 570000ef;   % 266: 		jal 	printString %
0000029a : 0fc11517;   % 268: 		la 	a0, Addrs %
0000029b : ec050513;   % 268:  %
0000029c : 0280006f;   % 269: 		j	End_utval %
0000029d : 0fc11517;   % 272: End_CauseD: 	la 	a0, CauseD %
0000029e : e9f50513;   % 272:  %
0000029f : 00000593;   % 273: 		li 	a1, 0 %
000002a0 : 00100613;   % 274: 		li 	a2, 1 %
000002a1 : 0000c6b7;   % 275: 		li 	a3, 0x0000c0ff %
000002a2 : 0ff68693;   % 275:  %
000002a3 : 548000ef;   % 276: 		jal 	printString %
000002a4 : 0fc11517;   % 278: 		la 	a0, Addrs %
000002a5 : e9850513;   % 278:  %
000002a6 : 00000593;   % 281: End_utval:	li 	a1, 0 %
000002a7 : 01800613;   % 282: 		li 	a2, 24 %
000002a8 : 0000c6b7;   % 283: 		li 	a3, 0x000c0ff %
000002a9 : 0ff68693;   % 283:  %
000002aa : 52c000ef;   % 284: 		jal	printString %
000002ab : 01b00533;   % 286: 		mv 	a0, s11 %
000002ac : 03800593;   % 287: 		li 	a1, 56 %
000002ad : 01800613;   % 288: 		li 	a2, 24 %
000002ae : 0000c6b7;   % 289: 		li 	a3, 0x0000c0ff %
000002af : 0ff68693;   % 289:  %
000002b0 : 4a0000ef;   % 290: 		jal 	printHex %
000002b1 : 0fc11517;   % 293: End_uepc: 	la 	a0, PC 		# Imprime o pc em que a exceção ocorreu %
000002b2 : e5f50513;   % 293:  %
000002b3 : 00000593;   % 294: 		li 	a1, 0 %
000002b4 : 00c00613;   % 295: 		li 	a2, 12 %
000002b5 : 0000c6b7;   % 296: 		li 	a3, 0x000c0ff %
000002b6 : 0ff68693;   % 296:  %
000002b7 : 4f8000ef;   % 297: 		jal 	printString %
000002b8 : 04101573;   % 299: 		csrrw 	a0, 65, zero	 %
000002b9 : 01c00593;   % 300: 		li	a1, 28 %
000002ba : 00c00613;   % 301: 		li 	a2, 12 %
000002bb : 0000c6b7;   % 302: 		li 	a3, 0x0000c0ff %
000002bc : 0ff68693;   % 302:  %
000002bd : 46c000ef;   % 303: 		jal 	printHex	 %
000002be : 2400006f;   % 305: 		j goToExit 		# encerra execução %
000002bf : ef810113;   % 312: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
000002c0 : 00112023;   % 313:     sw     x1,    0(sp) %
000002c1 : 00212223;   % 314:     sw     x2,    4(sp) %
000002c2 : 00312423;   % 315:     sw     x3,    8(sp) %
000002c3 : 00412623;   % 316:     sw     x4,   12(sp) %
000002c4 : 00512823;   % 317:     sw     x5,   16(sp) %
000002c5 : 00612a23;   % 318:     sw     x6,   20(sp) %
000002c6 : 00712c23;   % 319:     sw     x7,   24(sp) %
000002c7 : 00812e23;   % 320:     sw     x8,   28(sp) %
000002c8 : 02912023;   % 321:     sw     x9,   32(sp) %
000002c9 : 02a12223;   % 322:     sw     x10,  36(sp) %
000002ca : 02b12423;   % 323:     sw     x11,  40(sp) %
000002cb : 02c12623;   % 324:     sw     x12,  44(sp) %
000002cc : 02d12823;   % 325:     sw     x13,  48(sp) %
000002cd : 02e12a23;   % 326:     sw     x14,  52(sp) %
000002ce : 02f12c23;   % 327:     sw     x15,  56(sp) %
000002cf : 03012e23;   % 328:     sw     x16,  60(sp) %
000002d0 : 05112023;   % 329:     sw     x17,  64(sp) %
000002d1 : 05212223;   % 330:     sw     x18,  68(sp) %
000002d2 : 05312423;   % 331:     sw     x19,  72(sp) %
000002d3 : 05412623;   % 332:     sw     x20,  76(sp) %
000002d4 : 05512823;   % 333:     sw     x21,  80(sp) %
000002d5 : 05612a23;   % 334:     sw     x22,  84(sp) %
000002d6 : 05712c23;   % 335:     sw     x23,  88(sp) %
000002d7 : 05812e23;   % 336:     sw     x24,  92(sp) %
000002d8 : 07912023;   % 337:     sw     x25,  96(sp) %
000002d9 : 07a12223;   % 338:     sw     x26, 100(sp) %
000002da : 07b12423;   % 339:     sw     x27, 104(sp) %
000002db : 07c12623;   % 340:     sw     x28, 108(sp) %
000002dc : 07d12823;   % 341:     sw     x29, 112(sp) %
000002dd : 07e12a23;   % 342:     sw     x30, 116(sp) %
000002de : 07f12c23;   % 343:     sw     x31, 120(sp) %
000002df : 06012e27;   % 344:     fsw    f0,  124(sp) %
000002e0 : 08112027;   % 345:     fsw    f1,  128(sp) %
000002e1 : 08212227;   % 346:     fsw    f2,  132(sp) %
000002e2 : 08312427;   % 347:     fsw    f3,  136(sp) %
000002e3 : 08412627;   % 348:     fsw    f4,  140(sp) %
000002e4 : 08512827;   % 349:     fsw    f5,  144(sp) %
000002e5 : 08612a27;   % 350:     fsw    f6,  148(sp) %
000002e6 : 08712c27;   % 351:     fsw    f7,  152(sp) %
000002e7 : 08812e27;   % 352:     fsw    f8,  156(sp) %
000002e8 : 0a912027;   % 353:     fsw    f9,  160(sp) %
000002e9 : 0aa12227;   % 354:     fsw    f10, 164(sp) %
000002ea : 0ab12427;   % 355:     fsw    f11, 168(sp) %
000002eb : 0ac12627;   % 356:     fsw    f12, 172(sp) %
000002ec : 0ad12827;   % 357:     fsw    f13, 176(sp) %
000002ed : 0ae12a27;   % 358:     fsw    f14, 180(sp) %
000002ee : 0af12c27;   % 359:     fsw    f15, 184(sp) %
000002ef : 0b012e27;   % 360:     fsw    f16, 188(sp) %
000002f0 : 0d112027;   % 361:     fsw    f17, 192(sp) %
000002f1 : 0d212227;   % 362:     fsw    f18, 196(sp) %
000002f2 : 0d312427;   % 363:     fsw    f19, 200(sp) %
000002f3 : 0d412627;   % 364:     fsw    f20, 204(sp) %
000002f4 : 0d512827;   % 365:     fsw    f21, 208(sp) %
000002f5 : 0d612a27;   % 366:     fsw    f22, 212(sp) %
000002f6 : 0d712c27;   % 367:     fsw    f23, 216(sp) %
000002f7 : 0d812e27;   % 368:     fsw    f24, 220(sp) %
000002f8 : 0f912027;   % 369:     fsw    f25, 224(sp) %
000002f9 : 0fa12227;   % 370:     fsw    f26, 228(sp) %
000002fa : 0fb12427;   % 371:     fsw    f27, 232(sp) %
000002fb : 0fc12627;   % 372:     fsw    f28, 236(sp) %
000002fc : 0fd12827;   % 373:     fsw    f29, 240(sp) %
000002fd : 0fe12a27;   % 374:     fsw    f30, 244(sp) %
000002fe : 0ff12c27;   % 375:     fsw    f31, 248(sp) %
000002ff : 000002b3;   % 378:     add     t0, zero, zero %
00000300 : 00000333;   % 379:     add     t1, zero, zero %
00000301 : 000003b3;   % 380:     add     t2, zero, zero %
00000302 : 00000e33;   % 381:     add     t3, zero, zero %
00000303 : 00000eb3;   % 382:     add     t4, zero, zero %
00000304 : 00000f33;   % 383:     add     t5, zero, zero %
00000305 : 00000fb3;   % 384:     add     t6, zero, zero %
00000306 : 00a00293;   % 389:     addi    t0, zero, 10 %
00000307 : 11128e63;   % 390:     beq     t0, a7, goToExit          # ecall exit %
00000308 : 06e00293;   % 391:     addi    t0, zero, 110 %
00000309 : 11128a63;   % 392:     beq     t0, a7, goToExit          # ecall exit %
0000030a : 00100293;   % 394:     addi    t0, zero, 1               # ecall 1 = print int %
0000030b : 13128263;   % 395:     beq     t0, a7, goToPrintInt %
0000030c : 06500293;   % 396:     addi    t0, zero, 101             # ecall 1 = print int %
0000030d : 11128e63;   % 397:     beq     t0, a7, goToPrintInt %
0000030e : 00200293;   % 399:     addi    t0, zero, 2               # ecall 2 = print float %
0000030f : 13128663;   % 400:     beq     t0, a7, goToPrintFloat %
00000310 : 06600293;   % 401:     addi    t0, zero, 102             # ecall 2 = print float %
00000311 : 13128263;   % 402:     beq     t0, a7, goToPrintFloat %
00000312 : 00400293;   % 404:     addi    t0, zero, 4               # ecall 4 = print string %
00000313 : 11128663;   % 405:     beq     t0, a7, goToPrintString %
00000314 : 06800293;   % 406:     addi    t0, zero, 104             # ecall 4 = print string %
00000315 : 11128263;   % 407:     beq     t0, a7, goToPrintString %
00000316 : 00500293;   % 409:     addi    t0, zero, 5               # ecall 5 = read int %
00000317 : 11128e63;   % 410:     beq     t0, a7, goToReadInt %
00000318 : 06900293;   % 411:     addi    t0, zero, 105             # ecall 5 = read int %
00000319 : 11128a63;   % 412:     beq     t0, a7, goToReadInt %
0000031a : 00600293;   % 414:     addi    t0, zero, 6               # ecall 6 = read float %
0000031b : 11128e63;   % 415:     beq     t0, a7, goToReadFloat %
0000031c : 06a00293;   % 416:     addi    t0, zero, 106             # ecall 6 = read float %
0000031d : 11128a63;   % 417:     beq     t0, a7, goToReadFloat %
0000031e : 00800293;   % 419:     addi    t0, zero, 8               # ecall 8 = read string %
0000031f : 11128263;   % 420:     beq     t0, a7, goToReadString %
00000320 : 06c00293;   % 421:     addi    t0, zero, 108             # ecall 8 = read string %
00000321 : 0f128e63;   % 422:     beq     t0, a7, goToReadString %
00000322 : 00b00293;   % 424:     addi    t0, zero, 11              # ecall 11 = print char %
00000323 : 0d128a63;   % 425:     beq     t0, a7, goToPrintChar %
00000324 : 06f00293;   % 426:     addi    t0, zero, 111             # ecall 11 = print char %
00000325 : 0d128663;   % 427:     beq     t0, a7, goToPrintChar %
00000326 : 00c00293;   % 429:     addi    t0, zero, 12              # ecall 12 = read char %
00000327 : 0d128a63;   % 430:     beq     t0, a7, goToReadChar %
00000328 : 07000293;   % 431:     addi    t0, zero, 112             # ecall 12 = read char %
00000329 : 0d128663;   % 432:     beq     t0, a7, goToReadChar %
0000032a : 01e00293;   % 434:     addi    t0, zero, 30              # ecall 30 = time %
0000032b : 0f128e63;   % 435:     beq     t0, a7, goToTime %
0000032c : 08200293;   % 436:     addi    t0, zero, 130             # ecall 30 = time %
0000032d : 0f128a63;   % 437:     beq     t0, a7, goToTime %
0000032e : 02000293;   % 439:     addi    t0, zero, 32              # ecall 32 = sleep %
0000032f : 0f128a63;   % 440:     beq     t0, a7, goToSleep %
00000330 : 08400293;   % 441:     addi    t0, zero, 132             # ecall 32 = sleep %
00000331 : 0f128663;   % 442:     beq     t0, a7, goToSleep %
00000332 : 02900293;   % 444:     addi    t0, zero, 41              # ecall 41 = random %
00000333 : 0f128663;   % 445:     beq     t0, a7, goToRandom %
00000334 : 08d00293;   % 446:     addi    t0, zero, 141             # ecall 41 = random %
00000335 : 0f128263;   % 447:     beq     t0, a7, goToRandom %
00000336 : 02200293;   % 449:     addi    t0, zero, 34       		# ecall 34 = print hex %
00000337 : 0b128a63;   % 450:     beq     t0, a7, goToPrintHex %
00000338 : 08600293;   % 451:     addi    t0, zero, 134		# ecall 34 = print hex %
00000339 : 0b128663;   % 452:     beq     t0, a7, goToPrintHex %
0000033a : 01f00293;   % 454:     addi    t0, zero, 31              # ecall 31 = MIDI out %
0000033b : 0b128663;   % 455:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
0000033c : 08300293;   % 456:     addi    t0, zero, 131             # ecall 31 = MIDI out %
0000033d : 0b128263;   % 457:     beq     t0, a7, goToMidiOut %
0000033e : 02100293;   % 459:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
0000033f : 0b128263;   % 460:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
00000340 : 08500293;   % 461:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
00000341 : 09128e63;   % 462:     beq     t0, a7, goToMidiOutSync %
00000342 : 03000293;   % 464:     addi    t0, zero, 48              # ecall 48 = CLS %
00000343 : 0b128a63;   % 465:     beq     t0, a7, goToCLS %
00000344 : 09400293;   % 466:     addi    t0, zero, 148              # ecall 48 = CLS %
00000345 : 0b128663;   % 467:     beq     t0, a7, goToCLS %
00000346 : 02f00293;   % 469:     addi    t0, zero, 47              # ecall 47 = DrawLine %
00000347 : 0b128663;   % 470:     beq     t0, a7, goToBRES %
00000348 : 09300293;   % 471:     addi    t0, zero, 147              # ecall 47 = DrawLine %
00000349 : 0b128263;   % 472:     beq     t0, a7, goToBRES     %
0000034a : 02400293;   % 474:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
0000034b : 0b128263;   % 475:     beq     t0, a7, goToPrintIntUnsigned %
0000034c : 08800293;   % 476:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
0000034d : 09128e63;   % 477:     beq     t0, a7, goToPrintIntUnsigned %
0000034e : 10008237;   % 480: <13> li tp, 0x10008000			# carrega tp = 0x10008000 %
0000034f : 00020213;   % 480:  %
00000350 : 00419663;   % 480: <14> bne gp,tp,goToExitDE2			# Na DE1 gp = 0 ! Não tem segmento .extern %
00000351 : 00a00893;   % 481: 		li 	a7, 10			# chama o ecall normal do Rars %
00000352 : 00000073;   % 482: 		ecall				# exit ecall %
00000353 : 0000006f;   % 484: 	goToExitDE2:	j 	goToExitDE2		# trava o processador : Não tem sistema operacional! %
00000354 : 190000ef;   % 486: 	goToPrintInt:	jal     printInt               	# chama printInt %
00000355 : 0840006f;   % 487: 		j       endEcall %
00000356 : 27c000ef;   % 489: 	goToPrintString: jal     printString           	# chama printString %
00000357 : 07c0006f;   % 490: 		j       endEcall %
00000358 : 2bc000ef;   % 492: 	goToPrintChar:	jal     printChar		# chama printChar %
00000359 : 0740006f;   % 493: 		j       endEcall %
0000035a : 660000ef;   % 495: 	goToPrintFloat:	jal     printFloat		# chama printFloat %
0000035b : 06c0006f;   % 496: 		j       endEcall %
0000035c : 3a0000ef;   % 498: 	goToReadChar:	jal     readChar              	# chama readChar %
0000035d : 0640006f;   % 499: 		j       endEcall %
0000035e : 4c8000ef;   % 501: 	goToReadInt:   	jal     readInt                 # chama readInt %
0000035f : 05c0006f;   % 502: 		j       endEcall %
00000360 : 430000ef;   % 504: 	goToReadString:	jal     readString              # chama readString %
00000361 : 0540006f;   % 505: 		j       endEcall %
00000362 : 039000ef;   % 507: 	goToReadFloat:	jal     readFloat               # chama readFloat %
00000363 : 04c0006f;   % 508: 		j       endEcall %
00000364 : 1d0000ef;   % 510: 	goToPrintHex:	jal     printHex                # chama printHex %
00000365 : 0440006f;   % 511: 		j       endEcall %
00000366 : 528000ef;   % 513: 	goToMidiOut:	jal     midiOut                 # chama MIDIout %
00000367 : 03c0006f;   % 514: 		j       endEcall %
00000368 : 598000ef;   % 516: 	goToMidiOutSync: jal     midiOutSync   		# chama MIDIoutSync %
00000369 : 0340006f;   % 517: 		j       endEcall %
0000036a : 27d000ef;   % 519: 	goToTime:	jal ra     timeEcall                    # chama time %
0000036b : 02c0006f;   % 520: 		j       endEcall %
0000036c : 2a1000ef;   % 522: 	goToSleep:	jal     sleep                  	# chama sleep %
0000036d : 0240006f;   % 523: 		j       endEcall %
0000036e : 2cd000ef;   % 525: 	goToRandom:	jal     random                 	# chama random %
0000036f : 01c0006f;   % 526: 		j       endEcall %
00000370 : 2ed000ef;   % 528: 	goToCLS:	jal     clsCLS                 	# chama CLS %
00000371 : 0140006f;   % 529: 		j       endEcall %
00000372 : 341000ef;   % 531: 	goToBRES:	jal     BRESENHAM               # chama BRESENHAM %
00000373 : 00c0006f;   % 532: 		j       endEcall   %
00000374 : 465000ef;   % 534: 	goToPrintIntUnsigned: jal   printIntUnsigned	# chama Print Unsigned Int %
00000375 : 0040006f;   % 535: 		j	endEcall  		 %
00000376 : 00012083;   % 539: endEcall:  	lw	x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
00000377 : 00412103;   % 540: 		lw	x2,   4(sp)	 %
00000378 : 00812183;   % 541: 		lw	x3,   8(sp)	 %
00000379 : 00c12203;   % 542: 		lw	x4,  12(sp)      	 %
0000037a : 01012283;   % 543: 		lw	x5,  16(sp)      	 %
0000037b : 01412303;   % 544: 		lw	x6,  20(sp)	 %
0000037c : 01812383;   % 545: 		lw	x7,  24(sp) %
0000037d : 01c12403;   % 546: 		lw	x8,  28(sp) %
0000037e : 02012483;   % 547: 		lw	x9,  32(sp) %
0000037f : 02812583;   % 549: 		lw     x11, 40(sp) %
00000380 : 02c12603;   % 550: 		lw     x12, 44(sp) %
00000381 : 03012683;   % 551: 		lw     x13, 48(sp) %
00000382 : 03412703;   % 552: 		lw     x14, 52(sp) %
00000383 : 03812783;   % 553: 		lw     x15, 56(sp) %
00000384 : 03c12803;   % 554: 		lw     x16, 60(sp) %
00000385 : 04012883;   % 555: 		lw     x17, 64(sp) %
00000386 : 04412903;   % 556: 		lw     x18, 68(sp) %
00000387 : 04812983;   % 557: 		lw     x19, 72(sp) %
00000388 : 04c12a03;   % 558: 		lw     x20, 76(sp) %
00000389 : 05012a83;   % 559: 		lw     x21, 80(sp) %
0000038a : 05412b03;   % 560: 		lw     x22, 84(sp) %
0000038b : 05812b83;   % 561: 		lw     x23, 88(sp) %
0000038c : 05c12c03;   % 562: 		lw     x24, 92(sp) %
0000038d : 06012c83;   % 563: 		lw     x25, 96(sp) %
0000038e : 06412d03;   % 564: 		lw     x26, 100(sp) %
0000038f : 06812d83;   % 565: 		lw     x27, 104(sp) %
00000390 : 06c12e03;   % 566: 		lw     x28, 108(sp) %
00000391 : 07012e83;   % 567: 		lw     x29, 112(sp) %
00000392 : 07412f03;   % 568: 		lw     x30, 116(sp) %
00000393 : 07812f83;   % 569: 		lw     x31, 120(sp) %
00000394 : 07c12007;   % 570: 		flw    f0,  124(sp) %
00000395 : 08012087;   % 571: 		flw    f1,  128(sp) %
00000396 : 08412107;   % 572: 		flw    f2,  132(sp) %
00000397 : 08812187;   % 573: 		flw    f3,  136(sp) %
00000398 : 08c12207;   % 574: 		flw    f4,  140(sp) %
00000399 : 09012287;   % 575: 		flw    f5,  144(sp) %
0000039a : 09412307;   % 576: 		flw    f6,  148(sp) %
0000039b : 09812387;   % 577: 		flw    f7,  152(sp) %
0000039c : 09c12407;   % 578: 		flw    f8,  156(sp) %
0000039d : 0a012487;   % 579: 		flw    f9,  160(sp) %
0000039e : 0a812587;   % 581: 		flw    f11, 168(sp) %
0000039f : 0ac12607;   % 582: 		flw    f12, 172(sp) %
000003a0 : 0b012687;   % 583: 		flw    f13, 176(sp) %
000003a1 : 0b412707;   % 584: 		flw    f14, 180(sp) %
000003a2 : 0b812787;   % 585: 		flw    f15, 184(sp) %
000003a3 : 0bc12807;   % 586: 		flw    f16, 188(sp) %
000003a4 : 0c012887;   % 587: 		flw    f17, 192(sp) %
000003a5 : 0c412907;   % 588: 		flw    f18, 196(sp) %
000003a6 : 0c812987;   % 589: 		flw    f19, 200(sp) %
000003a7 : 0cc12a07;   % 590: 		flw    f20, 204(sp) %
000003a8 : 0d012a87;   % 591: 		flw    f21, 208(sp) %
000003a9 : 0d412b07;   % 592: 		flw    f22, 212(sp) %
000003aa : 0d812b87;   % 593: 		flw    f23, 216(sp) %
000003ab : 0dc12c07;   % 594: 		flw    f24, 220(sp) %
000003ac : 0e012c87;   % 595: 		flw    f25, 224(sp) %
000003ad : 0e412d07;   % 596: 		flw    f26, 228(sp) %
000003ae : 0e812d87;   % 597: 		flw    f27, 232(sp) %
000003af : 0ec12e07;   % 598: 		flw    f28, 236(sp) %
000003b0 : 0f012e87;   % 599: 		flw    f29, 240(sp) %
000003b1 : 0f412f07;   % 600: 		flw    f30, 244(sp) %
000003b2 : 0f812f87;   % 601: 		flw    f31, 248(sp) %
000003b3 : 10810113;   % 603: 		addi    sp, sp, 264 %
000003b4 : 04101273;   % 605: 		csrrw 	tp, 65, zero	# le o valor de EPC salvo no registrador uepc (reg 65) %
000003b5 : 00420213;   % 606: 		addi 	tp, tp, 4	# soma 4 para obter a instrucao seguinte ao ecall %
000003b6 : 04121073;   % 607: 		csrrw 	zero, 65, tp	# coloca no registrador uepc %
000003b7 : 00200073;   % 608: 		uret			# retorna PC=uepc %
000003b8 : ffc10113;   % 621: printInt:	addi 	sp, sp, -4			# Aloca espaco %
000003b9 : 00112023;   % 622: 		sw 	ra, 0(sp)			# salva ra %
000003ba : 0fc10297;   % 623: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
000003bb : 6fc28293;   % 623:  %
000003bc : 00055a63;   % 625: 		bge 	a0, zero, ehposprintInt		# Se eh positvo %
000003bd : 02d00313;   % 626: 		li 	t1, '-'				# carrega o sinal - %
000003be : 00628023;   % 627: 		sb 	t1, 0(t0)			# coloca no buffer %
000003bf : 00128293;   % 628: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000003c0 : 40a00533;   % 629: 		sub 	a0, zero, a0			# torna o numero positivo %
000003c1 : 00a00393;   % 631: ehposprintInt:  li 	t2, 10				# carrega numero 10 %
000003c2 : 00000313;   % 632: 		li 	t1, 0				# carrega numero de digitos com 0 %
000003c3 : 02754eb3;   % 634: loop1printInt:	div 	t4, a0, t2			# divide por 10 (quociente) %
000003c4 : 02756e33;   % 635: 		rem 	t3, a0, t2			# resto %
000003c5 : ffc10113;   % 636: 		addi 	sp, sp, -4			# aloca espaco na pilha %
000003c6 : 01c12023;   % 637: 		sw 	t3, 0(sp)			# coloca resto na pilha %
000003c7 : 01d00533;   % 638: 		mv 	a0, t4				# atualiza o numero com o quociente %
000003c8 : 00130313;   % 639: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
000003c9 : fe0514e3;   % 640: 		bne 	a0, zero, loop1printInt		# verifica se o numero eh zero %
000003ca : 00012383;   % 642: loop2printInt:	lw 	t2, 0(sp)			# le digito da pilha %
000003cb : 00410113;   % 643: 		addi 	sp, sp, 4			# libera espaco %
000003cc : 03038393;   % 644: 		addi 	t2, t2, 48			# converte o digito para ascii %
000003cd : 00728023;   % 645: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
000003ce : 00128293;   % 646: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000003cf : fff30313;   % 647: 		addi 	t1, t1, -1			# decrementa contador de digitos %
000003d0 : fe0314e3;   % 648: 		bne 	t1, zero, loop2printInt		# eh o ultimo? %
000003d1 : 00028023;   % 649: 		sb 	zero, 0(t0)			# insere \NULL na string %
000003d2 : 0fc10517;   % 651: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
000003d3 : 69c50513;   % 651:  %
000003d4 : 084000ef;   % 652: 		jal 	printString			# chama o print string %
000003d5 : 00012083;   % 654: 		lw 	ra, 0(sp)			# recupera a %
000003d6 : 00410113;   % 655: 		addi 	sp, sp, 4			# libera espaco %
000003d7 : 00008067;   % 656: fimprintInt:	ret					# retorna %
000003d8 : ffc10113;   % 668: printHex:	addi    sp, sp, -4    		# aloca espaco %
000003d9 : 00112023;   % 669:     		sw      ra, 0(sp)		# salva ra %
000003da : 00a002b3;   % 670: 		mv 	t0, a0			# Inteiro de 32 bits a ser impresso em Hexa %
000003db : 0fc11317;   % 671: 		la 	t1, TabelaHexASCII	# endereco da tabela HEX->ASCII %
000003dc : 87830313;   % 671:  %
000003dd : 0fc10397;   % 672: 		la 	t2, TempBuffer		# onde a string sera montada %
000003de : 67038393;   % 672:  %
000003df : 03000e13;   % 674: 		li 	t3,'0'			# Caractere '0' %
000003e0 : 01c38023;   % 675: 		sb 	t3,0(t2)		# Escreve '0' no Buffer da String %
000003e1 : 07800e13;   % 676: 		li 	t3,'x'			# Caractere 'x' %
000003e2 : 01c380a3;   % 677: 		sb 	t3,1(t2)		# Escreve 'x' no Buffer da String %
000003e3 : 00238393;   % 678: 		addi 	t2,t2,2			# novo endereco inicial da string %
000003e4 : 01c00e13;   % 680: 		li 	t3, 28			# contador de nibble   inicio = 28 %
000003e5 : 020e4263;   % 681: loopprintHex:	blt 	t3, zero, fimloopprintHex	# terminou? t3<0? %
000003e6 : 01c2deb3;   % 682: 		srl 	t4, t0, t3		# desloca o nibble para direita %
000003e7 : 00fefe93;   % 683: 		andi 	t4, t4, 0x000F		# mascara o nibble	 %
000003e8 : 01d30eb3;   % 684: 		add 	t4, t1, t4		# endereco do ascii do nibble %
000003e9 : 000e8e83;   % 685: 		lb 	t4, 0(t4)		# le ascii do nibble %
000003ea : 01d38023;   % 686: 		sb 	t4, 0(t2)		# armazena o ascii do nibble no buffer da string %
000003eb : 00138393;   % 687: 		addi 	t2, t2, 1		# incrementa o endereco do buffer %
000003ec : ffce0e13;   % 688: 		addi 	t3, t3, -4		# decrementa o numero do nibble %
000003ed : fe1ff06f;   % 689: 		j 	loopprintHex %
000003ee : 00038023;   % 691: fimloopprintHex: sb 	zero,0(t2)		# grava \null na string %
000003ef : 0fc10517;   % 692: 		la 	a0, TempBuffer		# Argumento do print String %
000003f0 : 62850513;   % 692:  %
000003f1 : 010000ef;   % 693:     		jal	printString		# Chama o print string %
000003f2 : 00012083;   % 695: 		lw 	ra, 0(sp)		# recupera ra %
000003f3 : 00410113;   % 696: 		addi 	sp, sp, 4		# libera espaco %
000003f4 : 00008067;   % 697: fimprintHex:	ret				# retorna %
000003f5 : ff810113;   % 708: printString:	addi	sp, sp, -8			# aloca espaco %
000003f6 : 00112023;   % 709:     		sw	ra, 0(sp)			# salva ra %
000003f7 : 00812223;   % 710:     		sw	s0, 4(sp)			# salva s0 %
000003f8 : 00a00433;   % 711:     		mv	s0, a0              		# s0 = endereco do caractere na string %
000003f9 : 00040503;   % 713: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
000003fa : 02050263;   % 715:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
000003fb : 030000ef;   % 717:     		jal     printChar       		# imprime char %
000003fc : 00858593;   % 719: 		addi    a1, a1, 8                 	# incrementa a coluna %
000003fd : 13900f93;   % 720: 		li 	t6, 313		 %
000003fe : 01f5c663;   % 721: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
000003ff : 00860613;   % 722:     		addi    a2, a2, 8                 	# incrementa a linha %
00000400 : 000005b3;   % 723:     		mv    	a1, zero			# volta a coluna zero %
00000401 : 00140413;   % 725: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
00000402 : fddff06f;   % 726:     		j       loopprintString       		# volta ao loop %
00000403 : 00012083;   % 728: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
00000404 : 00012403;   % 729: 			lw 	s0, 0(sp)		# recupera s0 original %
00000405 : 00810113;   % 730:     			addi    sp, sp, 8		# libera espaco %
00000406 : 00008067;   % 731: fimprintString:	ret      	    			# retorna %
00000407 : 0ff00e93;   % 753: printChar:	li 	t4, 0xFF	# t4 temporario %
00000408 : 008e9e93;   % 754: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
00000409 : 01d6ff33;   % 755: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
0000040a : 008f5f13;   % 756:     		srli	t5, t5, 8	# numero da cor de fundo %
0000040b : 0ff6ff93;   % 757: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
0000040c : 02000213;   % 759: 		li 	tp, ' ' %
0000040d : 00454863;   % 760: 		blt 	a0, tp, NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
0000040e : 07e00213;   % 761: 		li 	tp, '~' %
0000040f : 00a24463;   % 762: 		bgt	a0, tp, NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
00000410 : 0080006f;   % 763:     		j       IMPRIMIVEL %
00000411 : 02000513;   % 765: NAOIMPRIMIVEL:	li      a0, 32		# Imprime espaco %
00000412 : 14000213;   % 767: IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
00000413 : 02c20eb3;   % 768: 		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
00000414 : 00be8eb3;   % 769: 		add     t4, t4, a1               	# t4 = 320*y + x %
00000415 : 007e8e93;   % 770: 		addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
00000416 : ff000237;   % 771: 		li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
00000417 : 00020213;   % 771:  %
00000418 : 00070663;   % 772: 		beq 	a4, zero, PULAFRAME		# Verifica qual o frame a ser usado em a4 %
00000419 : ff100237;   % 773: 		li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
0000041a : 00020213;   % 773:  %
0000041b : 004e8eb3;   % 774: PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
0000041c : fe050393;   % 775: 		addi    t2, a0, -32               	# indice do char na memoria %
0000041d : 00339393;   % 776: 		slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
0000041e : 0fc10e17;   % 777: 		la      t3, LabelTabChar		# endereco dos caracteres na memoria %
0000041f : 148e0e13;   % 777:  %
00000420 : 01c383b3;   % 778: 		add     t2, t2, t3               	# endereco do caractere na memoria %
00000421 : 0003ae03;   % 779: 		lw      t3, 0(t2)                 	# carrega a primeira word do char %
00000422 : 00400293;   % 780: 		li 	t0, 4				# i=4 %
00000423 : 02028e63;   % 782: forChar1I:	beq     t0, zero, endForChar1I		# if(i == 0) end for i %
00000424 : 00800313;   % 783:     		addi    t1, zero, 8               	# j = 8 %
00000425 : 02030463;   % 785: 	forChar1J:      beq     t1, zero, endForChar1J    	# if(j == 0) end for j %
00000426 : 001e7c93;   % 786:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
00000427 : 001e5e13;   % 787:         		srli    t3, t3, 1             		# retira o primeiro bit %
00000428 : 000c8663;   % 788:         		beq     s9, zero, printCharPixelbg1	# pixel eh fundo? %
00000429 : 01fe8023;   % 789:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
0000042a : 0080006f;   % 790:         		j       endCharPixel1 %
0000042b : 01ee8023;   % 791: printCharPixelbg1:     	sb      t5, 0(t4)                 	# imprime pixel com cor de fundo %
0000042c : fff30313;   % 792: endCharPixel1:     	addi    t1, t1, -1                	# j-- %
0000042d : fffe8e93;   % 793:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
0000042e : fddff06f;   % 794:     			j       forChar1J			# vollta novo pixel %
0000042f : fff28293;   % 796: endForChar1J: 	addi    t0, t0, -1 		# i-- %
00000430 : 148e8e93;   % 797:     		addi    t4, t4, 328           	# 2**12 + 8 %
00000431 : fc9ff06f;   % 798:     		j       forChar1I		# volta ao loop %
00000432 : 0043ae03;   % 800: endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
00000433 : 00400293;   % 801: 		li 	t0, 4			# i = 4 %
00000434 : 02028e63;   % 802: forChar2I:     	beq     t0, zero, endForChar2I  # if(i == 0) end for i %
00000435 : 00800313;   % 803:     		addi    t1, zero, 8             # j = 8 %
00000436 : 02030463;   % 805: 	forChar2J:	beq	t1, zero, endForChar2J    	# if(j == 0) end for j %
00000437 : 001e7c93;   % 806:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
00000438 : 001e5e13;   % 807:         		srli    t3, t3, 1                 	# desloca para o proximo %
00000439 : 000c8663;   % 808:         		beq     s9, zero, printCharPixelbg2	# pixel eh fundo? %
0000043a : 01fe8023;   % 809:         		sb      t6, 0(t4)			# imprime cor frente %
0000043b : 0080006f;   % 810:         		j       endCharPixel2			# volta ao loop %
0000043c : 01ee8023;   % 812: printCharPixelbg2:     	sb      t5, 0(t4)			# imprime cor de fundo %
0000043d : fff30313;   % 814: endCharPixel2:     	addi    t1, t1, -1			# j-- %
0000043e : fffe8e93;   % 815:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
0000043f : fddff06f;   % 816:     			j       forChar2J %
00000440 : fff28293;   % 818: endForChar2J:	addi	t0, t0, -1 		# i-- %
00000441 : 148e8e93;   % 819:     		addi    t4, t4, 328		# %
00000442 : fc9ff06f;   % 820:     		j       forChar2I		# volta ao loop %
00000443 : 00008067;   % 822: endForChar2I:	ret				# retorna %
00000444 : 00000013;   % 831: readChar: 		nop %
00000445 : ff2002b7;   % 835: readCharKDMMIO:		li 	t0, 0xFF200000			# Execucao com Polling do KD MMIO %
00000446 : 00028293;   % 835:  %
00000447 : 0002a503;   % 837: loopReadCharKDMMIO:  	lw     	a0, 0(t0)   			# le o bit de flag do teclado %
00000448 : 00157513;   % 838: 			andi 	a0, a0, 0x0001			# mascara bit 0 %
00000449 : fe050ce3;   % 839: 			beq     a0, zero, loopReadCharKDMMIO  	# testa se uma tecla foi pressionada %
0000044a : 0042a503;   % 840:    			lw 	a0, 4(t0)			# le o ascii da tecla pressionada %
0000044b : 0800006f;   % 841: 			j fimreadChar				# fim Read Char %
0000044c : ff2002b7;   % 858: readCharDE2:  	li      t0, 0xFF200100 			# Endereco buffer0 %
0000044d : 10028293;   % 858:  %
0000044e : 0002a303;   % 859:     		lw     	t1, 0(t0)				# conteudo inicial do buffer %
0000044f : 0002a383;   % 861: loopReadChar:  	lw     	t2, 0(t0)   				# le buffer teclado %
00000450 : 00639663;   % 862: 		bne     t2, t1, buffermodificadoChar    	# testa se o buffer foi modificado %
00000451 : 00700333;   % 864: atualizaBufferChar:  mv t1, t2			# atualiza o buffer com o novo valor %
00000452 : ff5ff06f;   % 865:     		j       loopReadChar		# loop de principal de leitura  %
00000453 : 0ff00f13;   % 867: buffermodificadoChar:	li t5, 0xFF %
00000454 : 008f1f13;   % 868: 	slli 	t5, t5, 8			# t5 = 0x0000FF00 %
00000455 : 01e3fe33;   % 869: 	and    	t3, t2, t5 			# mascara o 2o scancode %
00000456 : 0000f237;   % 870: 	li 	tp, 0x0000F000 %
00000457 : 00020213;   % 870:  %
00000458 : 024e0063;   % 871: 	beq     t3, tp, teclasoltaChar		# eh 0xF0 no 2o scancode? tecla foi solta %
00000459 : 0ff00213;   % 872: 	li	tp, 0x000000FF %
0000045a : 0043fe33;   % 873: 	and	t3, t2, tp			# mascara 1o scancode	(essa podemos fazer diretamente) %
0000045b : 01200213;   % 874: 	li	tp, 0x00000012 %
0000045c : fc4e1ae3;   % 875:     	bne 	t3, tp, atualizaBufferChar	# nao eh o SHIFT que esta pressionado ? volta a ler  %
0000045d : 0fc10417;   % 876: 	la      s0, LabelScanCodeShift		# se for SHIFT que esta pressionado atualiza o endereco da tabel %
0000045e : 3ea40413;   % 876:  %
0000045f : fc9ff06f;   % 877:     	j       atualizaBufferChar		# volta a ler %
00000460 : 0ff3fe13;   % 879: teclasoltaChar:		andi t3, t2, 0x00FF		# mascara o 1o scancode %
00000461 : 08000213;   % 880: 	li	tp, 0x00000080 %
00000462 : fbc24ee3;   % 881:   	bgt	t3, tp, atualizaBufferChar		# se o scancode for > 0x80 entao nao eh imprimivel! %
00000463 : 01200213;   % 882:   	li	tp, 0x00000012 %
00000464 : 004e1863;   % 883: 	bne 	t3, tp, naoehshiftChar			# nao foi o shift que foi solto? entao processa %
00000465 : 0fc10417;   % 884: 	la 	s0, LabelScanCode			# shift foi solto atualiza o endereco da tabela %
00000466 : 34440413;   % 884:  %
00000467 : fa9ff06f;   % 885: 	j 	atualizaBufferChar			# volta a ler %
00000468 : 01c40e33;   % 887: naoehshiftChar:	   	add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
00000469 : 000e0503;   % 888:     	lb      a0, 0(t3)				# le o ascii do caracter para a0 %
0000046a : f8050ee3;   % 889:     	beq     a0, zero, atualizaBufferChar		# se for caractere nao imprimivel volta a ler %
0000046b : 00008067;   % 891: fimreadChar: 	ret			# retorna %
0000046c : ff810113;   % 903: readString: 	addi 	sp, sp, -8			# reserva espaco na pilha %
0000046d : 00812223;   % 904: 		sw 	s0, 4(sp)			# salva s0 %
0000046e : 00112023;   % 905: 		sw 	ra, 0(sp)			# salva ra %
0000046f : 00000693;   % 906: 		li 	a3, 0				# zera o contador de caracteres digitados %
00000470 : 00a00933;   % 907: 		mv 	s2, a0				# salva o endereco inicial %
00000471 : 0fc10417;   % 908:     		la      s0, LabelScanCode      		# Endereco da tabela de scancode inicial para readChar %
00000472 : 31440413;   % 908:  %
00000473 : 04d58c63;   % 910: loopreadString: beq 	a1, a3, fimreadString   	# buffer cheio fim %
00000474 : ff810113;   % 912: 		addi 	sp, sp, -8 %
00000475 : 00112023;   % 913: 		sw 	ra, 0(sp)			# salva ra %
00000476 : 00a12223;   % 914: 		sw 	a0, 4(sp)			# salva a0 pois ele sera reescrito em readChar %
00000477 : f35ff0ef;   % 915: 		jal 	readChar			# le um caracter do teclado (retorno em a0) %
00000478 : 00a00fb3;   % 916: 		mv 	t6, a0				# t6 eh a letra lida em readChar %
00000479 : 00012083;   % 917: 		lw 	ra, 0(sp) %
0000047a : 00412503;   % 918: 		lw 	a0, 4(sp) %
0000047b : 00810113;   % 919: 		addi 	sp, sp, 8 %
0000047c : 00800213;   % 921: 		li 	tp, 0x08			 %
0000047d : 004f9c63;   % 922: 		bne	t6, tp, PulaBackSpace		# Se nao for BACKSPACE %
0000047e : fcd00ae3;   % 923: 		beq	zero, a3, loopreadString	# Se não tem nenhum caractere no buffer apenas volta a ler %
0000047f : fff68693;   % 924: 		addi	a3, a3, -1			# diminui contador %
00000480 : fff50513;   % 925: 		addi 	a0, a0, -1			# diminui endereco do buffer %
00000481 : 00050023;   % 926: 		sb 	zero, 0(a0)			# coloca zero no caractere anterior %
00000482 : fc5ff06f;   % 927: 		j loopreadString %
00000483 : 00a00213;   % 929: PulaBackSpace:	li	tp, 0x0A %
00000484 : 004f8a63;   % 930: 		beq 	t6, tp, fimreadString		# se for tecla ENTER fim %
00000485 : 01f50023;   % 931: 		sb 	t6, 0(a0)			# grava no buffer %
00000486 : 00168693;   % 932: 		addi 	a3, a3, 1			# incrementa contador %
00000487 : 00150513;   % 933: 		addi 	a0, a0, 1			# incrementa endereco no buffer %
00000488 : fadff06f;   % 934: 		j loopreadString			# volta a ler outro caractere %
00000489 : 00050023;   % 936: fimreadString: 	sb 	zero, 0(a0)			# grava NULL no buffer %
0000048a : fff50613;   % 937: 		addi 	a2, a0, -1			# Para que a2 tenha o endereco do ultimo caractere digitado %
0000048b : 01200533;   % 938: 		mv	a0, s2				# a0 volta a ter o endereco inicial da string %
0000048c : 00012083;   % 939: 		lw 	ra, 0(sp)			# recupera ra %
0000048d : 00412403;   % 940: 		lw	s0, 4(sp)			# recupera s0 %
0000048e : 00810113;   % 941: 		addi 	sp, sp, 8			# libera espaco %
0000048f : 00008067;   % 942: 		ret					# retorna %
00000490 : ffc10113;   % 951: readInt: 	addi 	sp,sp,-4		# reserva espaco na pilha %
00000491 : 00112023;   % 952: 	sw 	ra, 0(sp)			# salva ra %
00000492 : 0fc10517;   % 953: 	la 	a0, TempBuffer			# Endereco do buffer de string %
00000493 : 39c50513;   % 953:  %
00000494 : 00a00593;   % 954: 	li 	a1, 10				# numero maximo de digitos %
00000495 : f5dff0ef;   % 955: 	jal 	readString			# le uma string de ate 10 digitos, a3 numero de digitos %
00000496 : 00c002b3;   % 956: 	mv 	t0, a2				# copia endereco do ultimo digito %
00000497 : 00a00393;   % 957: 	li 	t2, 10				# dez %
00000498 : 00100e13;   % 958: 	li 	t3, 1				# dezenas, centenas, etc %
00000499 : 00000533;   % 959: 	mv 	a0, zero			# zera o numero %
0000049a : 04068663;   % 961: loopReadInt: 	beq	a3,zero, fimReadInt	# Leu todos os digitos %
0000049b : 00028303;   % 962: 	lb 	t1, (t0)			# le um digito %
0000049c : 02d00213;   % 963: 	li	tp, 0x0000002D %
0000049d : 02430e63;   % 964: 	beq 	t1, tp, ehnegReadInt		# = '-' %
0000049e : 02b00213;   % 965: 	li	tp, 0x0000002B %
0000049f : 02430c63;   % 966: 	beq 	t1, tp, ehposReadInt		# = '+' %
000004a0 : 03000213;   % 967: 	li	tp, 0x00000030 %
000004a1 : 02434463;   % 968: 	blt 	t1, tp, naoehReadInt		# <'0' %
000004a2 : 03900213;   % 969: 	li	tp, 0x00000039 %
000004a3 : 02624063;   % 970: 	bgt 	t1, tp, naoehReadInt		# >'9' %
000004a4 : fd030313;   % 971: 	addi 	t1, t1, -48			# transforma ascii em numero %
000004a5 : 03c30333;   % 972: 	mul 	t1, t1, t3			# multiplica por dezenas/centenas %
000004a6 : 00650533;   % 973: 	add 	a0, a0, t1			# soma no numero %
000004a7 : 027e0e33;   % 974: 	mul 	t3, t3, t2			# proxima dezena/centena %
000004a8 : fff28293;   % 975: 	addi 	t0, t0, -1			# busca o digito anterior %
000004a9 : fff68693;   % 976: 	addi	a3, a3, -1			# reduz o contador de digitos  %
000004aa : fc1ff06f;   % 977: 	j 	loopReadInt			# volta para buscar proximo digito %
000004ab : 0080006f;   % 980: 		j fimReadInt			# como nao esta implmentado apenas retorna %
000004ac : 40a00533;   % 982: ehnegReadInt:	sub a0,zero,a0			# se for negativo %
000004ad : 00012083;   % 986: fimReadInt:	lw 	ra, 0(sp)		# recupera ra %
000004ae : 00410113;   % 987: 		addi 	sp, sp, 4		# libera espaco %
000004af : 00008067;   % 988: 		ret				# fim ReadInt %
000004b0 : 10008237;   % 1008: <13> li tp, 0x10008000			# carrega tp = 0x10008000 %
000004b1 : 00020213;   % 1008:  %
000004b2 : 00419863;   % 1008: <14> bne gp,tp,midiOutDE2			# Na DE1 gp = 0 ! Não tem segmento .extern %
000004b3 : 01f00893;   % 1010: 	li a7,31		# Chama o ecall normal %
000004b4 : 00000073;   % 1011: 	ecall %
000004b5 : 0600006f;   % 1012: 	j fimmidiOut %
000004b6 : ff2002b7;   % 1014: midiOutDE2:	li      t0, 0xFF200178 %
000004b7 : 17828293;   % 1014:  %
000004b8 : 00000333;   % 1015:     		add     t1, zero, zero %
000004b9 : 00f67393;   % 1020:    	 	andi    t2, a2, 0x0000000F %
000004ba : 01b39393;   % 1021:     		slli    t2, t2, 27 %
000004bb : 00736333;   % 1022:     		or      t1, t1, t2 %
000004bc : 07f6f393;   % 1025:     		andi    t2, a3, 0x0000007F %
000004bd : 01439393;   % 1026:     		slli    t2, t2, 20 %
000004be : 00736333;   % 1027:     		or      t1, t1, t2 %
000004bf : 07f57393;   % 1030:     		andi    t2, a0, 0x0000007F %
000004c0 : 00d39393;   % 1031:     		slli    t2, t2, 13 %
000004c1 : 00736333;   % 1032:     		or      t1, t1, t2 %
000004c2 : 1ff00e93;   % 1035: 		li 	t4, 0x1FF %
000004c3 : 004e9e93;   % 1036: 		slli 	t4, t4, 4 %
000004c4 : 00fe8e93;   % 1037: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
000004c5 : 01d5f3b3;   % 1038:     		and    	t2, a1, t4 %
000004c6 : 00736333;   % 1039:     		or      t1, t1, t2 %
000004c7 : 0040006f;   % 1042:     		j       SintMidOut %
000004c8 : 0062a023;   % 1044: SintMidOut:	sw	t1, 0(t0) %
000004c9 : ff2003b7;   % 1047: 	    		li      t2, 0xFF20017C %
000004ca : 17c38393;   % 1047:  %
000004cb : 0003ae03;   % 1048: Check_AUD_DACLRCK:     	lw      t3, 0(t2) %
000004cc : fe0e0ee3;   % 1049:     			beq     t3, zero, Check_AUD_DACLRCK %
000004cd : 00008067;   % 1051: fimmidiOut:    		ret %
000004ce : 10008237;   % 1069: <13> li tp, 0x10008000			# carrega tp = 0x10008000 %
000004cf : 00020213;   % 1069:  %
000004d0 : 00419863;   % 1069: <14> bne gp,tp,midiOutSyncDE2			# Na DE1 gp = 0 ! Não tem segmento .extern %
000004d1 : 02100893;   % 1071: 	li a7,33		# Chama o ecall normal %
000004d2 : 00000073;   % 1072: 	ecall %
000004d3 : 0780006f;   % 1073: 	j fimmidiOutSync %
000004d4 : ff2002b7;   % 1075: midiOutSyncDE2:	li      t0, 0xFF200178 %
000004d5 : 17828293;   % 1075:  %
000004d6 : 00000333;   % 1076:     		add     t1, zero, zero %
000004d7 : 08000337;   % 1079:     		lui    	t1, 0x08000 %
000004d8 : 00431313;   % 1080: 		slli	t1,t1,4 %
000004d9 : 00f67393;   % 1083:     		andi    t2, a2, 0x00F %
000004da : 01b39393;   % 1084:     		slli    t2, t2, 27 %
000004db : 00736333;   % 1085:     		or      t1, t1, t2 %
000004dc : 07f6f393;   % 1088:     		andi    t2, a3, 0x07F %
000004dd : 01439393;   % 1089:     		slli    t2, t2, 20 %
000004de : 00736333;   % 1090:     		or      t1, t1, t2 %
000004df : 07f57393;   % 1093:     		andi    t2, a0, 0x07F %
000004e0 : 00d39393;   % 1094:     		slli    t2, t2, 13 %
000004e1 : 00736333;   % 1095:     		or      t1, t1, t2 %
000004e2 : 1ff00e93;   % 1098: 		li 	t4, 0x1FF %
000004e3 : 004e9e93;   % 1099: 		slli 	t4, t4, 4 %
000004e4 : 00fe8e93;   % 1100: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
000004e5 : 01d5f3b3;   % 1101:     		and    	t2, a1, t4 %
000004e6 : 00736333;   % 1102:     		or      t1, t1, t2 %
000004e7 : 0040006f;   % 1105:     		j       SintMidOutSync %
000004e8 : 0062a023;   % 1107: SintMidOutSync:	sw	t1, 0(t0) %
000004e9 : ff2003b7;   % 1110:     		li      t2, 0xFF20017C %
000004ea : 17c38393;   % 1110:  %
000004eb : ff200eb7;   % 1111:     		li      t4, 0xFF200180 %
000004ec : 180e8e93;   % 1111:  %
000004ed : 0003ae03;   % 1113: Check_AUD_DACLRCKSync:	lw      t3, 0(t2) %
000004ee : fe0e0ee3;   % 1114:     			beq     t3, zero, Check_AUD_DACLRCKSync %
000004ef : 000eaf03;   % 1116: Melody:     	lw      t5, 0(t4) %
000004f0 : fe0f1ee3;   % 1117:     		bne     t5, zero, Melody %
000004f1 : 00008067;   % 1119: fimmidiOutSync:	ret %
000004f2 : ffc10113;   % 1129: printFloat:	addi 	sp, sp, -4 %
000004f3 : 00112023;   % 1130: 		sw 	ra, 0(sp)				# salva ra %
000004f4 : 0fc10417;   % 1131: 		la 	s0, TempBuffer %
000004f5 : 21440413;   % 1131:  %
000004f6 : 02b00293;   % 1134: 		li 	t0, '+'			# define sinal '+' %
000004f7 : e00504d3;   % 1135: 		fmv.x.s s1, fa0			# recupera o numero float sem conversao %
000004f8 : 080003b7;   % 1136: 		lui	t2, 0x08000 %
000004f9 : 00439393;   % 1137: 		slli	t2,t2,4 %
000004fa : 0074f4b3;   % 1138: 		and 	s1, s1, t2			# mascara com 1000...0 %
000004fb : 00048663;   % 1139: 		beq 	s1, zero, ehposprintFloat	# eh positivo s1=0 %
000004fc : 00100493;   % 1140: 		li 	s1, 1				# numero eh negativo s1=1 %
000004fd : 02d00293;   % 1141: 		li 	t0, '-'				# define sinal '-' %
000004fe : 00540023;   % 1142: ehposprintFloat: sb 	t0, 0(s0)			# coloca sinal no buffer %
000004ff : 00140413;   % 1143: 		addi 	s0, s0,1			# incrementa o endereco do buffer %
00000500 : e00502d3;   % 1146: 		 fmv.x.s t0, fa0			# recupera o numero float sem conversao %
00000501 : 7f800337;   % 1147: 		 lui	t1, 0x7F800 %
00000502 : 0062f2b3;   % 1148: 		 and 	t0, t0, t1   			# mascara com 0111 1111 1000 0000 0000 0000... %
00000503 : 00129293;   % 1149: 		 slli 	t0, t0, 1			# tira o sinal do numero %
00000504 : 0182d293;   % 1150: 		 srli 	t0, t0, 24			# recupera o expoente %
00000505 : e0050353;   % 1153: 		fmv.x.s t1, fa0				# recupera o numero float sem conversao %
00000506 : 7ffff3b7;   % 1154: 		lui 	t2, 0x7FFFF %
00000507 : 0083d393;   % 1155: 		srli	t2, t2, 8 %
00000508 : 00f38393;   % 1156: 		addi	t2, t2, 0x00F			# t2 = 0x007FFFFF %
00000509 : 00737333;   % 1157: 		and 	t1, t1, t2			# mascara com 0000 0000 0111 1111 1111... 		  %
0000050a : 12028e63;   % 1159: 		beq 	t0, zero, ehExp0printFloat	# Expoente = 0 %
0000050b : 0ff00213;   % 1160: 		li	tp, 0x000000FF			# TP = 255 %
0000050c : 14428e63;   % 1161: 		beq 	t0, tp, ehExp255printFloat	# Expoente = 255 %
0000050d : 20a52053;   % 1165: 		fabs.s 		ft0, fa0		# ft0 recebe o modulo  de x %
0000050e : 00100213;   % 1166: 		li		tp, 1 %
0000050f : d00270d3;   % 1167: 		fcvt.s.w 	ft1, tp			# ft1 recebe o numero 1.0 %
00000510 : 00a00213;   % 1168: 		li		tp, 10 %
00000511 : d0027353;   % 1169: 		fcvt.s.w 	ft6, tp			# ft6 recebe o numero 10.0 %
00000512 : 00200213;   % 1170: 		li		tp, 2 %
00000513 : d0027e53;   % 1171: 		fcvt.s.w 	ft8, tp %
00000514 : 19c0f3d3;   % 1172: 		fdiv.s		ft7, ft1, ft8		# ft7 recebe o numero 0.5 %
00000515 : a0101ed3;   % 1174: 		flt.s 	t4, ft0, ft1		# ft0 < 1.0 ? Se sim, E deve ser negativo %
00000516 : 000e9663;   % 1175: 		bnez	t4, menor1printFloat	# se a comparacao deu true (1), pula %
00000517 : 20630153;   % 1176: 		fmv.s 	ft2, ft6		# ft2  fator de multiplicacao = 10 %
00000518 : 02c0006f;   % 1177: 		j 	cont2printFloat		# vai para expoente positivo %
00000519 : 1860f153;   % 1178: menor1printFloat: fdiv.s ft2,ft1,ft6		# ft2 fator multiplicativo = 0.1 %
0000051a : 20000253;   % 1181: cont1printFloat: 	fmv.s 	ft4, ft0			# inicia com o numero x  %
0000051b : 201081d3;   % 1182: 		 	fmv.s 	ft3, ft1			# contador comeca em 1 %
0000051c : 18227253;   % 1183: loop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
0000051d : a0120e53;   % 1184: 		 	fle.s 	t3, ft4, ft1			# o numero eh > que 1? entao fim %
0000051e : 000e0663;   % 1185: 		 	beq 	t3,zero, fimloop1printFloat %
0000051f : 0011f1d3;   % 1186: 		 	fadd.s 	ft3, ft3, ft1			# incrementa o contador %
00000520 : ff1ff06f;   % 1187: 		 	j 	loop1printFloat			# volta ao loop %
00000521 : 18227253;   % 1188: fimloop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# ajusta o numero %
00000522 : 0200006f;   % 1189: 		 	j 	intprintFloat			# vai para imprimir a parte inteira %
00000523 : 20000253;   % 1192: cont2printFloat:	fmv.s 	 ft4, ft0			# inicia com o numero x  %
00000524 : d00071d3;   % 1193: 		 	fcvt.s.w ft3, zero			# contador comeca em 0 %
00000525 : a0621e53;   % 1194: loop2printFloat:  	flt.s 	 t3, ft4, ft6			# resultado eh < que 10? entao fim %
00000526 : 18227253;   % 1195: 			fdiv.s 	 ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000527 : 000e1663;   % 1196: 			bne 	 t3, zero, intprintFloat %
00000528 : 0011f1d3;   % 1197: 		 	fadd.s 	 ft3, ft3, ft1			# incrementa o contador %
00000529 : ff1ff06f;   % 1198: 		 	j 	 loop2printFloat %
0000052a : 10227253;   % 1204: intprintFloat:		fmul.s 		ft4, ft4, ft2		# ajusta o numero %
0000052b : 08727253;   % 1205: 			fsub.s		ft4, ft4, ft7		# tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
0000052c : c00272d3;   % 1206: 		  	fcvt.w.s	t0, ft4			# coloca floor de ft4 em t0 %
0000052d : 00727253;   % 1207: 			fadd.s		ft4, ft4, ft7		# readiciona 0.5 %
0000052e : 03028293;   % 1208: 		  	addi 		t0, t0, 48		# converte para ascii %
0000052f : 00540023;   % 1209: 		  	sb 		t0, 0(s0)		# coloca no buffer %
00000530 : 00140413;   % 1210: 		  	addi 		s0, s0, 1		# incrementta o buffer %
00000531 : 02e00293;   % 1213: 		  	li 	t0, '.'				# carrega o '.' %
00000532 : 00540023;   % 1214: 		  	sb 	t0, 0(s0)			# coloca no buffer %
00000533 : 00140413;   % 1215: 		  	addi 	s0, s0, 1			# incrementa o buffer %
00000534 : 00800313;   % 1218: 		  	li 		t1, 8				# contador de digitos  -  8 casas decimais %
00000535 : 04030063;   % 1219: loopfracprintFloat:  	beq 		t1, zero, fimfracprintFloat	# fim dos digitos? %
00000536 : 08727253;   % 1220: 			fsub.s		ft4, ft4, ft7			# tira 0.5 %
00000537 : c0027f53;   % 1221: 			fcvt.w.s 	t5, ft4				# floor de ft4 %
00000538 : 00727253;   % 1222: 			fadd.s		ft4, ft4, ft7			# readiciona 0.5 %
00000539 : d00f72d3;   % 1223: 			fcvt.s.w	ft5, t5				# reconverte em float so com a parte inteira %
0000053a : 085272d3;   % 1224: 		  	fsub.s 		ft5, ft4, ft5			# parte fracionaria %
0000053b : 1062f2d3;   % 1225: 		  	fmul.s 		ft5, ft5, ft6			# mult x 10 %
0000053c : 0872f2d3;   % 1226: 			fsub.s		ft5, ft5, ft7			# tira 0.5 %
0000053d : c002f2d3;   % 1227: 			fcvt.w.s	t0, ft5				# coloca floor de ft5 em 10 %
0000053e : 03028293;   % 1228: 		  	addi 		t0, t0, 48			# converte para ascii %
0000053f : 00540023;   % 1229: 		  	sb 		t0, 0(s0)			# coloca no buffer %
00000540 : 00140413;   % 1230: 		  	addi 		s0, s0, 1			# incrementa endereco %
00000541 : fff30313;   % 1231: 		  	addi 		t1, t1, -1			# decrementa contador %
00000542 : 0072f2d3;   % 1232: 			fadd.s		ft5, ft5, ft7			# reincrementa 0.5 %
00000543 : 20528253;   % 1233: 		  	fmv.s 		ft4, ft5			# coloca o numero em ft4 %
00000544 : fc5ff06f;   % 1234: 		  	j 		loopfracprintFloat		# volta ao loop %
00000545 : 04500293;   % 1237: fimfracprintFloat: 	li 	t0,'E'			# carrega 'E' %
00000546 : 00540023;   % 1238: 			sb 	t0, 0(s0)		# coloca no buffer %
00000547 : 00140413;   % 1239: 			addi 	s0, s0, 1		# incrementa endereco %
00000548 : 02b00293;   % 1242: 		  	li 	t0, '+'				# carrega '+' %
00000549 : 000e8463;   % 1243: 		  	beqz 	t4, expposprintFloat		# nao eh negativo? %
0000054a : 02d00293;   % 1244: 		  	li 	t0, '-'				# carrega '-' %
0000054b : 00540023;   % 1245: expposprintFloat: 	sb 	t0, 0(s0)			# coloca no buffer %
0000054c : 00140413;   % 1246: 		  	addi 	s0, s0, 1			#incrementa endereco %
0000054d : 00a00313;   % 1249: 			li 	t1, 10				# carrega 10	 %
0000054e : c001f253;   % 1250: 			fcvt.w.s  tp, ft3			# passa ft3 para t0 %
0000054f : 026242b3;   % 1251: 			div 	t0, tp, t1			# divide por 10 (dezena) %
00000550 : 026263b3;   % 1252: 			rem	t2, tp, t1			# t0 = quociente, t2 = resto %
00000551 : 03028293;   % 1253: 			addi 	t0, t0, 48			# converte para ascii %
00000552 : 00540023;   % 1254: 			sb 	t0, 0(s0)			# coloca no buffer %
00000553 : 03038393;   % 1255: 			addi 	t2, t2, 48			# converte para ascii %
00000554 : 007400a3;   % 1256: 			sb 	t2, 1(s0)			# coloca no buffer %
00000555 : 00040123;   % 1257: 			sb 	zero, 2(s0)			# insere \NULL da string %
00000556 : 0fc10517;   % 1258: 			la 	a0, TempBuffer			# endereco do Buffer										 %
00000557 : 08c50513;   % 1258:  %
00000558 : 0500006f;   % 1259: 	  		j 	fimprintFloat			# imprime a string %
00000559 : 00030e63;   % 1261: ehExp0printFloat: 	beq 	t1, zero, eh0printFloat		# Verifica se eh zero %
0000055a : 0fc10517;   % 1263: ehDesnormprintFloat: 	la 	a0, NumDesnormP			# string numero desnormalizado positivo %
0000055b : 28f50513;   % 1263:  %
0000055c : 04048063;   % 1264: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
0000055d : 0fc10517;   % 1265: 		 	la 	a0, NumDesnormN			# string numero desnormalizado negativo %
0000055e : 28c50513;   % 1265:  %
0000055f : 0340006f;   % 1266: 			j 	fimprintFloat			# imprime a string %
00000560 : 0fc10517;   % 1268: eh0printFloat:		la 	a0, NumZero			# string do zero %
00000561 : 28950513;   % 1268:  %
00000562 : 0280006f;   % 1269: 			j 	fimprintFloat 	 		# imprime a string %
00000563 : 00030863;   % 1271: ehExp255printFloat: 	beq 	t1, zero, ehInfprintFloat	# se mantissa eh zero entao eh Infinito %
00000564 : 0fc10517;   % 1273: ehNaNprintfFloat:	la 	a0, NumNaN			# string do NaN %
00000565 : 29850513;   % 1273:  %
00000566 : 0180006f;   % 1274: 			j 	fimprintFloat			# imprime string %
00000567 : 0fc10517;   % 1276: ehInfprintFloat:	la 	a0, NumInfP			# string do infinito positivo %
00000568 : 27850513;   % 1276:  %
00000569 : 00048663;   % 1277: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
0000056a : 0fc10517;   % 1278: 			la 	a0, NumInfN			# string do infinito negativo %
0000056b : 27650513;   % 1278:  %
0000056c : a25ff0ef;   % 1281: fimprintFloat:		jal 	printString			# imprime a string em a0 %
0000056d : 00012083;   % 1282: 			lw 	ra, 0(sp)			# recupera ra %
0000056e : 00410113;   % 1283: 			addi 	sp, sp, 4			# libera espaco %
0000056f : 00008067;   % 1284: 			ret					# retorna %
00000570 : ffc10113;   % 1293: readFloat: addi sp, sp, -4			# aloca espaco %
00000571 : 00112023;   % 1294: 	sw 	ra, 0(sp)			# salva ra %
00000572 : 0fc10517;   % 1295: 	la 	a0, TempBuffer			# endereco do FloatBuffer %
00000573 : 01c50513;   % 1295:  %
00000574 : 02000593;   % 1296: 	li 	a1, 32				# numero maximo de caracteres %
00000575 : bddff0ef;   % 1297: 	jal	readString			# le string, retorna a2 ultimo endereco e a3 numero de caracteres %
00000576 : 00c00433;   % 1298: 	mv 	s0, a2				# ultimo endereco da string (antes do \0) %
00000577 : 00d004b3;   % 1299: 	mv 	s1, a3				# numero de caracteres digitados %
00000578 : 0fc10b97;   % 1300: 	la	s7, TempBuffer			# Endereco do primeiro caractere %
00000579 : 004b8b93;   % 1300:  %
0000057a : 017002b3;   % 1302: lePrimeiroreadFloat:	mv 	t0, s7		# Endereco de Inicio %
0000057b : 00028303;   % 1303: 	lb 	t1, 0(t0)				# le primeiro caractere %
0000057c : 06500213;   % 1304: 	li	tp, 'e'					# TP = 101 = 'e' %
0000057d : 02430863;   % 1305: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
0000057e : 04500213;   % 1306: 	li 	tp, 'E'					# TP = 69 = 'E' %
0000057f : 02430463;   % 1307: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
00000580 : 02e00213;   % 1308: 	li	tp, '.'					# TP = 46 = '.' %
00000581 : 02430063;   % 1309: 	beq 	t1, tp, insere0AreadFloat		#  insere '0' antes %
00000582 : 02b00213;   % 1310: 	li	tp, '+'					# TP = 43 = '+' %
00000583 : 00430863;   % 1311: 	beq 	t1, tp, pulaPrimreadChar		# pula o primeiro caractere %
00000584 : 02d00213;   % 1312: 	li	tp, '-'					# TP = 45 = '-' %
00000585 : 00430463;   % 1313: 	beq 	t1, tp, pulaPrimreadChar %
00000586 : 03c0006f;   % 1314: 	j leUltimoreadFloat %
00000587 : 001b8b93;   % 1316: pulaPrimreadChar: addi s7,s7,1			# incrementa o endereco inicial %
00000588 : fc9ff06f;   % 1317: 		  j lePrimeiroreadFloat		# volta a testar o novo primeiro caractere %
00000589 : 008002b3;   % 1319: insere0AreadFloat: mv t0, s0			# endereco do ultimo caractere %
0000058a : 00140413;   % 1320: 		   addi s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000058b : 00148493;   % 1321: 	   	   addi s1, s1, 1		# incrementa o num. caracteres %
0000058c : 000400a3;   % 1322: 	   	   sb 	zero, 1(s0)		# \NULL do final de string %
0000058d : 01700f33;   % 1323: 	   	   mv t5, s7			# primeiro caractere %
0000058e : 01e28a63;   % 1324: insere0Aloop:	   beq 	t0, t5, saiinsere0AreadFloat	# chegou no inicio entao fim %
0000058f : 00028303;   % 1325: 		   lb 	t1, 0(t0)		# le caractere %
00000590 : 006280a3;   % 1326: 		   sb 	t1, 1(t0)		# escreve no proximo %
00000591 : fff28293;   % 1327: 		   addi t0, t0, -1		# decrementa endereco %
00000592 : ff1ff06f;   % 1328: 		   j insere0Aloop		# volta ao loop %
00000593 : 03000313;   % 1329: saiinsere0AreadFloat: li t1, '0'		# ascii '0' %
00000594 : 00628023;   % 1330: 		   sb t1, 0(t0)			# escreve '0' no primeiro caractere %
00000595 : 00040303;   % 1332: leUltimoreadFloat: lb  	t1, 0(s0)			# le ultimo caractere %
00000596 : 06500213;   % 1333: 		li	tp, 'e'				# TP = 101 = 'e' %
00000597 : 00430c63;   % 1334: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000598 : 04500213;   % 1335: 		li 	tp, 'E'				# TP = 69 = 'E' %
00000599 : 00430863;   % 1336: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000059a : 02e00213;   % 1337: 		li	tp, '.'				# TP = 46 = '.' %
0000059b : 00430463;   % 1338: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000059c : 0180006f;   % 1339: 		j 	inicioreadFloat %
0000059d : 00140413;   % 1341: insere0PreadFloat: addi	s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000059e : 00148493;   % 1342: 	   	   addi	s1, s1, 1		# incrementa o num. caracteres %
0000059f : 03000313;   % 1343: 		   li 	t1,'0'			# ascii '0' %
000005a0 : 00640023;   % 1344: 		   sb 	t1,0(s0)		# escreve '0' no ultimo %
000005a1 : 000400a3;   % 1345: 		   sb 	zero,1(s0)		# \null do final de string %
000005a2 : d0007553;   % 1347: inicioreadFloat:  fcvt.s.w 	fa0, zero	# fa0 Resultado inicialmente zero %
000005a3 : 00a00293;   % 1348: 		li 	t0, 10			# inteiro 10	 %
000005a4 : d002f353;   % 1349: 		fcvt.s.w 	ft6, t0		# ft6 contem sempre o numero cte 10.0000 %
000005a5 : 00100293;   % 1350: 		li 	t0, 1			# inteiro 1 %
000005a6 : d002f0d3;   % 1351: 		fcvt.s.w 	ft1, t0		# ft1 contem sempre o numero cte 1.0000	 %
000005a7 : 00140993;   % 1354: procuraEreadFloat:	addi 	s3, s0, 1			# inicialmente nao tem 'e' ou 'E' na string (fora da string) %
000005a8 : 017002b3;   % 1355: 			mv 	t0, s7				# endereco inicial %
000005a9 : 02828263;   % 1356: loopEreadFloat: 	beq 	t0, s0, naotemEreadFloat	# sai se nao encontrou 'e' %
000005aa : 00028303;   % 1357: 			lb 	t1, 0(t0)			# le o caractere %
000005ab : 06500213;   % 1358: 			li	tp, 'e'				# TP = 101 = 'e' %
000005ac : 00430a63;   % 1359: 			beq 	t1, tp, ehEreadFloat		# tem 'e' %
000005ad : 04500213;   % 1360: 			li 	tp, 'E'				# TP = 69 = 'E' %
000005ae : 00430663;   % 1361: 			beq	t1, tp, ehEreadFloat		# tem 'E' %
000005af : 00128293;   % 1362: 			addi 	t0, t0, 1			# incrementa endereco %
000005b0 : fe5ff06f;   % 1363: 			j 	loopEreadFloat			# volta ao loop %
000005b1 : 005009b3;   % 1364: ehEreadFloat: 		mv 	s3, t0				# endereco do 'e' ou 'E' na string %
000005b2 : 01300933;   % 1368: procuraPontoreadFloat:	mv 	s2, s3				# local inicial do ponto na string (='e' se existir) ou fora da string	 %
000005b3 : 017002b3;   % 1369: 			mv 	t0, s7				# endereco inicial %
000005b4 : 00828e63;   % 1370: loopPontoreadFloat: 	beq 	t0, s0, naotemPontoreadFloat	# sai se nao encontrou '.' %
000005b5 : 00028303;   % 1371: 			lb 	t1, 0(t0)			# le o caractere %
000005b6 : 02e00213;   % 1372: 			li	tp, '.'				# TP = 46 = '.' %
000005b7 : 00430663;   % 1373: 			beq 	t1, tp, ehPontoreadFloat	# tem '.' %
000005b8 : 00128293;   % 1374: 			addi 	t0, t0, 1			# incrementa endereco %
000005b9 : fedff06f;   % 1375: 			j 	loopPontoreadFloat		# volta ao loop %
000005ba : 00500933;   % 1376: ehPontoreadFloat: 	mv 	s2, t0				# endereco do '.' na string %
000005bb : d0007153;   % 1380: intreadFloat:		fcvt.s.w 	ft2, zero		# zera parte inteira %
000005bc : fff90293;   % 1381: 			addi 	t0, s2, -1			# endereco do caractere antes do ponto %
000005bd : 201081d3;   % 1382: 			fmv.s 	ft3, ft1			# ft3 contem unidade/dezenas/centenas		 %
000005be : 01700f33;   % 1383: 			mv 	t5, s7				# Primeiro Endereco %
000005bf : 03e2ca63;   % 1384: loopintreadFloat: 	blt 	t0, t5, fimintreadFloat		# sai se o endereco for < inicio da string %
000005c0 : 00028303;   % 1385: 			lb 	t1, 0(t0)			# le o caracter %
000005c1 : 03000213;   % 1386: 			li	tp, '0'				# TP = 48 = '0' %
000005c2 : 10434863;   % 1387: 			blt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
000005c3 : 03900213;   % 1388: 			li	tp, '9'				# TP = 57 = '9' %
000005c4 : 10624463;   % 1389: 			bgt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
000005c5 : fd030313;   % 1390: 			addi 	t1, t1, -48			# converte ascii para decimal %
000005c6 : d0037153;   % 1391: 			fcvt.s.w  ft2, t1			# digito lido em float %
000005c7 : 10317153;   % 1393: 			fmul.s 	ft2,ft2,ft3			# multiplica por un/dezena/centena %
000005c8 : 00257553;   % 1394: 			fadd.s 	fa0,fa0,ft2			# soma no resultado %
000005c9 : 1061f1d3;   % 1395: 			fmul.s 	ft3,ft3,ft6			# proxima dezena/centena %
000005ca : fff28293;   % 1397: 			addi 	t0,t0,-1			# endereco anterior %
000005cb : fd1ff06f;   % 1398: 			j 	loopintreadFloat		# volta ao loop %
000005cc : d0007153;   % 1402: fracreadFloat:		fcvt.s.w 	ft2, zero		# zera parte fracionaria %
000005cd : 00190293;   % 1403: 			addi 	t0, s2, 1			# endereco depois do ponto %
000005ce : 1860f1d3;   % 1404: 			fdiv.s 	ft3, ft1, ft6			# ft3 inicial 0.1 %
000005cf : 0332da63;   % 1406: loopfracreadFloat: 	bge 	t0, s3, fimfracreadFloat	# endereco eh 'e' 'E' ou >ultimo %
000005d0 : 00028303;   % 1407: 			lb 	t1, 0(t0)			# le o caracter %
000005d1 : 03000213;   % 1408: 			li	tp, '0'				# TP = 48 = '0' %
000005d2 : 0c434863;   % 1409: 			blt 	t1, tp, erroreadFloat		# nao eh valido %
000005d3 : 03900213;   % 1410: 			li	tp, '9'				# TP = 57 = '9' %
000005d4 : 0c624463;   % 1411: 			bgt 	t1, tp, erroreadFloat		# nao eh valido %
000005d5 : fd030313;   % 1412: 			addi 	t1, t1, -48			# converte ascii para decimal %
000005d6 : d0037153;   % 1413: 			fcvt.s.w 	ft2, t1			# digito lido em float		 %
000005d7 : 10317153;   % 1415: 			fmul.s 	ft2, ft2, ft3			# multiplica por ezena/centena %
000005d8 : 00257553;   % 1416: 			fadd.s 	fa0, fa0, ft2			# soma no resultado %
000005d9 : 1861f1d3;   % 1417: 			fdiv.s 	ft3, ft3, ft6			# proxima frac un/dezena/centena %
000005da : 00128293;   % 1419: 			addi 	t0, t0, 1			# proximo endereco %
000005db : fd1ff06f;   % 1420: 			j 	loopfracreadFloat		# volta ao loop		 %
000005dc : d0007153;   % 1425: potreadFloat:		fcvt.s.w 	ft2, zero		# zera potencia %
000005dd : 00198293;   % 1426: 			addi 	t0, s3, 1			# endereco seguinte ao 'e' %
000005de : 00000a13;   % 1427: 			li 	s4, 0				# sinal do expoente positivo %
000005df : 00028303;   % 1428: 			lb 	t1, 0(t0)			# le o caractere seguinte ao 'e' %
000005e0 : 02d00213;   % 1429: 			li	tp, '-'				# TP = 45 = '-' %
000005e1 : 00430863;   % 1430: 			beq	t1, tp, potsinalnegreadFloat	# sinal do expoente esta escrito e eh positivo %
000005e2 : 02b00213;   % 1431: 			li	tp, '+'				# TP = 43 = '+' %
000005e3 : 00430663;   % 1432: 			beq 	t1, tp, potsinalposreadFloat	# sinal do expoente eh negativo %
000005e4 : 00c0006f;   % 1433: 			j 	pulapotsinalreadFloat		# nao esta escrito o sinal do expoente %
000005e5 : 00100a13;   % 1434: potsinalnegreadFloat:	li 	s4, 1				# s4=1 expoente negativo %
000005e6 : 00128293;   % 1435: potsinalposreadFloat:	addi 	t0, t0, 1			# se tiver '-' ou '+' avanca para o proximo endereco %
000005e7 : 00500ab3;   % 1436: pulapotsinalreadFloat:	mv 	s5, t0 				# Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente		 %
000005e8 : 201081d3;   % 1438: 			fmv.s 	ft3, ft1			# ft3 un/dez/cen = 1 %
000005e9 : 00000393;   % 1441: expreadFloat:		li 	t2, 0				# zera expoente %
000005ea : 008002b3;   % 1442: 			mv 	t0, s0				# endereco do ultimo caractere da string %
000005eb : 00a00e13;   % 1443: 			li 	t3, 10				# numero dez %
000005ec : 00100e93;   % 1444: 			li 	t4, 1				# und/dez/cent %
000005ed : 0352c063;   % 1446: loopexpreadFloat:	blt 	t0, s5, fimexpreadFloat		# ainda nao eh o endereco do primeiro digito? %
000005ee : 00028303;   % 1447: 			lb 	t1, 0(t0)			# le o caracter %
000005ef : fd030313;   % 1448: 			addi 	t1, t1, -48			# converte ascii para decimal %
000005f0 : 03d30333;   % 1449: 			mul 	t1, t1, t4			# mul digito %
000005f1 : 006383b3;   % 1450: 			add 	t2, t2, t1			# soma ao exp %
000005f2 : 03ce8eb3;   % 1451: 			mul 	t4, t4, t3			# proxima casa decimal %
000005f3 : fff28293;   % 1452: 			addi 	t0, t0, -1			# endereco anterior %
000005f4 : fe5ff06f;   % 1453: 			j loopexpreadFloat			# volta ao loop %
000005f5 : 20108153;   % 1457: 			fmv.s 	ft2, ft1			# numero 10^exp  inicial=1 %
000005f6 : 206301d3;   % 1458: 			fmv.s 	ft3, ft6			# se o sinal for + ft3 eh 10 %
000005f7 : 00000213;   % 1459: 			li	tp, 0x00000000			# TP = ZERO %
000005f8 : 004a0463;   % 1460: 			beq 	s4, tp, sinalexpPosreadFloat	# se sinal exp positivo %
000005f9 : 1860f1d3;   % 1461: 			fdiv.s 	ft3, ft1, ft6			# se o final for - ft3 eh 0.1 %
000005fa : 00000293;   % 1462: sinalexpPosreadFloat:	li 	t0, 0				# contador  %
000005fb : 00728863;   % 1463: sinalexpreadFloat: 	beq 	t0, t2, fimsinalexpreadFloat	# se chegou ao fim %
000005fc : 10317153;   % 1464: 			fmul.s 	ft2, ft2, ft3			# multiplica pelo fator 10 ou 0.1 %
000005fd : 00128293;   % 1465: 			addi 	t0, t0, 1			# incrementa o contador %
000005fe : ff5ff06f;   % 1466: 			j 	sinalexpreadFloat %
000005ff : 10257553;   % 1469: 		fmul.s 	fa0, fa0, ft2		# multiplicacao final! %
00000600 : 0fc10297;   % 1471: 		la 	t0, TempBuffer		# ajuste final do sinal do numero %
00000601 : de428293;   % 1471:  %
00000602 : 00028303;   % 1472: 		lb 	t1, 0(t0)		# le primeiro caractere %
00000603 : 02d00213;   % 1473: 		li	tp, '-'			# TP = 45 = '-' %
00000604 : 00431463;   % 1474: 		bne 	t1, tp, fimreadFloat	# nao eh '-' entao fim %
00000605 : 20a51553;   % 1475: 		fneg.s 	fa0, fa0		# nega o numero float %
00000606 : 00012083;   % 1478: fimreadFloat: 	lw 	ra, 0(sp)		# recupera ra %
00000607 : 00410113;   % 1479: 		addi 	sp, sp, 4		# libera espaco %
00000608 : 00008067;   % 1480: 		ret				# retorna %
00000609 : 10008237;   % 1489: <13> li tp, 0x10008000			# carrega tp = 0x10008000 %
0000060a : 00020213;   % 1489:  %
0000060b : 00419863;   % 1489: <14> bne gp,tp,timeDE2			# Na DE1 gp = 0 ! Não tem segmento .extern %
0000060c : 01e00893;   % 1491: 	li 	a7,30				# Chama o ecall do Rars %
0000060d : 00000073;   % 1492: 	ecall %
0000060e : 0140006f;   % 1493: 	j 	fimTime				# saida %
0000060f : ff2002b7;   % 1496: 		li 	t0, 0xFF200510		# carrega endereco do StopWatch %
00000610 : 51028293;   % 1496:  %
00000611 : 0002a503;   % 1497: 	 	lw 	a0, 0(t0)		# carrega o valor do contador de ms %
00000612 : 00000593;   % 1499: 	 	li 	a1, 0x0000		# contador eh de 32 bits %
00000613 : 00008067;   % 1500: fimTime: 	ret				# retorna %
00000614 : 10008237;   % 1508: <13> li tp, 0x10008000			# carrega tp = 0x10008000 %
00000615 : 00020213;   % 1508:  %
00000616 : 00419863;   % 1508: <14> bne gp,tp,sleepDE2			# Na DE1 gp = 0 ! Não tem segmento .extern %
00000617 : 02000893;   % 1510: 	li 	a7, 32				# Chama o ecall do Rars %
00000618 : 00000073;   % 1511: 	ecall			 %
00000619 : 01c0006f;   % 1512: 	j 	fimSleep			# Saida %
0000061a : ff2002b7;   % 1515: 		li 	t0, 0xFF200510		# endereco StopWatch %
0000061b : 51028293;   % 1515:  %
0000061c : 0002a303;   % 1516: 		lw 	t1, 0(t0)		# carrega o contador de ms %
0000061d : 006503b3;   % 1517: 		add 	t2, a0, t1		# soma com o tempo solicitado pelo usuario %
0000061e : 0002a303;   % 1519: LoopSleep: 	lw 	t1, 0(t0)		# carrega o contador de ms %
0000061f : fe734ee3;   % 1520: 		blt 	t1, t2, LoopSleep	# nao chegou ao fim volta ao loop %
00000620 : 00008067;   % 1522: fimSleep: 	ret				# retorna %
00000621 : 10008237;   % 1530: <13> li tp, 0x10008000			# carrega tp = 0x10008000 %
00000622 : 00020213;   % 1530:  %
00000623 : 00419863;   % 1530: <14> bne gp,tp,randomDE2			# Na DE1 gp = 0 ! Não tem segmento .extern %
00000624 : 02900893;   % 1532: 	li 	a7,41			# Chama o ecall do Rars %
00000625 : 00000073;   % 1533: 	ecall	 %
00000626 : 0100006f;   % 1534: 	j 	fimRandom		# saida %
00000627 : ff2002b7;   % 1536: randomDE2: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
00000628 : 51428293;   % 1536:  %
00000629 : 0002a503;   % 1537: 		lw 	a0, 0(t0)	# le a word em a0 %
0000062a : 00008067;   % 1539: fimRandom:	ret			# retorna %
0000062b : 00058c63;   % 1549: clsCLS:	beq 	a1, zero, frame0CLS %
0000062c : ff100337;   % 1550: 	li      t1, 0xFF100000              # Memoria VGA 1 %
0000062d : 00030313;   % 1550:  %
0000062e : ff1133b7;   % 1551:    	li      t2, 0xFF112C00 %
0000062f : c0038393;   % 1551:  %
00000630 : 0140006f;   % 1552:    	j 	pulaCLS %
00000631 : ff000337;   % 1553: frame0CLS: li      t1, 0xFF000000           # Memoria VGA 0 %
00000632 : 00030313;   % 1553:  %
00000633 : ff0133b7;   % 1554:    	   li      t2, 0xFF012C00   	 %
00000634 : c0038393;   % 1554:  %
00000635 : 0ff57513;   % 1555: pulaCLS: andi    a0, a0, 0x00FF %
00000636 : 00a002b3;   % 1558:  	mv 	t0, a0 %
00000637 : 00851513;   % 1559:  	slli 	a0, a0, 8 %
00000638 : 00a2e2b3;   % 1560:  	or 	t0, t0, a0 %
00000639 : 00851513;   % 1561:  	slli 	a0, a0, 8 %
0000063a : 00a2e2b3;   % 1562:  	or 	t0, t0, a0 %
0000063b : 00851513;   % 1563:  	slli 	a0, a0, 8 %
0000063c : 00a2e2b3;   % 1564:  	or 	t0, t0, a0 %
0000063d : 00730863;   % 1566: forCLS:	beq     t1, t2, fimCLS %
0000063e : 00532023;   % 1567: 	sw      t0, 0(t1) %
0000063f : 00430313;   % 1568:     	addi    t1, t1, 4 %
00000640 : ff5ff06f;   % 1569:     	j       forCLS %
00000641 : 00008067;   % 1571: fimCLS:	ret %
00000642 : ff000837;   % 1580: BRESENHAM: 	li	a6, 0xFF000000           	# Memoria VGA 0 %
00000643 : 00080813;   % 1580:  %
00000644 : 00078663;   % 1581: 	   	beq	a5, zero, pulaBRES %
00000645 : ff100837;   % 1582: 	   	li 	a6, 0xFF100000              # Memoria VGA 1 %
00000646 : 00080813;   % 1582:  %
00000647 : 14000893;   % 1584: pulaBRES: 	li 	a7, 320 %
00000648 : 40b682b3;   % 1585: 	  	sub 	t0, a3, a1 %
00000649 : 0002d463;   % 1586: 	  	bge 	t0, zero, PULAABRES %
0000064a : 405002b3;   % 1587: 	  	sub 	t0, zero, t0 %
0000064b : 40a60333;   % 1588: PULAABRES:	sub 	t1, a2, a0 %
0000064c : 00035463;   % 1589: 	   	bge  	t1, zero, PULABBRES %
0000064d : 40600333;   % 1590: 	   	sub  	t1, zero, t1	 %
0000064e : 0262d263;   % 1591: PULABBRES: 	bge  	t0, t1, PULACBRES %
0000064f : 00a65e63;   % 1592: 	   	ble  	a0, a2, PULAC1BRES %
00000650 : 00a007b3;   % 1593: 	   	mv 	a5, a0 %
00000651 : 00c00533;   % 1594: 	   	mv 	a0, a2 %
00000652 : 00f00633;   % 1595: 	   	mv 	a2, a5 %
00000653 : 00b007b3;   % 1596: 	   	mv	a5, a1 %
00000654 : 00d005b3;   % 1597: 	   	mv 	a1, a3 %
00000655 : 00f006b3;   % 1598: 	   	mv 	a3, a5 %
00000656 : 0240006f;   % 1599: PULAC1BRES:	j PLOTLOWBRES %
00000657 : 00b6de63;   % 1601: PULACBRES: 	ble  	a1, a3, PULAC2BRES %
00000658 : 00a007b3;   % 1602: 	   	mv 	a5, a0 %
00000659 : 00c00533;   % 1603: 	   	mv 	a0, a2 %
0000065a : 00f00633;   % 1604: 	   	mv 	a2, a5 %
0000065b : 00b007b3;   % 1605: 	   	mv 	a5, a1 %
0000065c : 00d005b3;   % 1606: 	   	mv 	a1, a3 %
0000065d : 00f006b3;   % 1607: 	   	mv 	a3, a5 %
0000065e : 0600006f;   % 1608: PULAC2BRES:	j PLOTHIGHBRES %
0000065f : 40a602b3;   % 1610: PLOTLOWBRES:	sub 	t0, a2, a0		# dx=x1-x0 %
00000660 : 40b68333;   % 1611: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000661 : 00100393;   % 1612: 	 	li  	t2, 1			# yi=1 %
00000662 : 00035663;   % 1613: 	 	bge 	t1, zero, PULA1BRES	# dy>=0 PULA %
00000663 : fff00393;   % 1614: 	 	li  	t2, -1			# yi=-1 %
00000664 : 40600333;   % 1615: 	 	sub 	t1, zero, t1		# dy=-dy %
00000665 : 00131e13;   % 1616: PULA1BRES:	slli 	t3, t1, 1		# 2*dy %
00000666 : 405e0e33;   % 1617: 		sub 	t3, t3, t0		# D=2*dy-dx %
00000667 : 00b00eb3;   % 1618: 		mv 	t4, a1			# y=y0 %
00000668 : 00a00f33;   % 1619: 		mv 	t5, a0			# x=x0 %
00000669 : 031e8fb3;   % 1621: LOOPx1BRES:	mul 	t6, t4, a7		# y*320 %
0000066a : 01ef8fb3;   % 1622: 		add 	t6, t6, t5		# y*320+x %
0000066b : 010f8fb3;   % 1623: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
0000066c : 00ef8023;   % 1624: 		sb 	a4, 0(t6)		# plot com cor a4 %
0000066d : 01c05863;   % 1626: 		ble 	t3, zero, PULA2BRES	# D<=0 %
0000066e : 007e8eb3;   % 1627: 		add 	t4, t4, t2		# y=y+yi %
0000066f : 00129f93;   % 1628: 		slli 	t6, t0, 1		# 2*dx %
00000670 : 41fe0e33;   % 1629: 		sub 	t3, t3, t6		# D=D-2dx %
00000671 : 00131f93;   % 1630: PULA2BRES:	slli 	t6, t1, 1		# 2*dy %
00000672 : 01fe0e33;   % 1631: 		add 	t3, t3, t6		# D=D+2dx %
00000673 : 001f0f13;   % 1632: 		addi	t5, t5, 1 %
00000674 : fccf1ae3;   % 1633: 		bne 	t5, a2, LOOPx1BRES %
00000675 : 00008067;   % 1634: 		ret %
00000676 : 40a602b3;   % 1636: PLOTHIGHBRES: 	sub 	t0, a2, a0		# dx=x1-x0 %
00000677 : 40b68333;   % 1637: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000678 : 00100393;   % 1638: 	 	li 	t2, 1			# xi=1 %
00000679 : 0002d663;   % 1639: 	 	bge 	t0, zero, PULA3BRES	# dy>=0 PULA %
0000067a : fff00393;   % 1640: 	 	li 	t2, -1			# xi=-1 %
0000067b : 405002b3;   % 1641: 	 	sub 	t0, zero, t0		# dx=-dx %
0000067c : 00129e13;   % 1642: PULA3BRES:	slli 	t3, t0, 1		# 2*dx %
0000067d : 406e0e33;   % 1643: 		sub 	t3, t3, t1		# D=2*dx-d1 %
0000067e : 00a00eb3;   % 1644: 		mv 	t4, a0			# x=x0 %
0000067f : 00b00f33;   % 1645: 		mv 	t5, a1			# y=y0 %
00000680 : 031f0fb3;   % 1647: LOOPx2BRES:	mul 	t6, t5, a7		# y*320 %
00000681 : 01df8fb3;   % 1648: 		add 	t6, t6, t4		# y*320+x %
00000682 : 010f8fb3;   % 1649: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000683 : 00ef8023;   % 1650: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000684 : 01c05863;   % 1652: 		ble 	t3, zero, PULA4BRES	# D<=0 %
00000685 : 007e8eb3;   % 1653: 		add 	t4, t4, t2		# x=x+xi %
00000686 : 00131f93;   % 1654: 		slli 	t6, t1, 1		# 2*dy %
00000687 : 41fe0e33;   % 1655: 		sub 	t3, t3, t6		# D=D-2dy %
00000688 : 00129f93;   % 1656: PULA4BRES: 	slli 	t6, t0, 1		# 2*dy %
00000689 : 01fe0e33;   % 1657: 		add 	t3, t3, t6		# D=D+2dx %
0000068a : 001f0f13;   % 1658: 		addi 	t5, t5, 1 %
0000068b : fcdf1ae3;   % 1659: 		bne 	t5, a3, LOOPx2BRES %
0000068c : 00008067;   % 1660: 		ret		 %
0000068d : ffc10113;   % 1674: printIntUnsigned:	addi 	sp, sp, -4		# Aloca espaco %
0000068e : 00112023;   % 1675: 		sw 	ra, 0(sp)			# salva ra %
0000068f : 0fc10297;   % 1676: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000690 : ba828293;   % 1676:  %
00000691 : 00a00393;   % 1678: 		li 	t2, 10				# carrega numero 10 %
00000692 : 00000313;   % 1679: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000693 : 02755eb3;   % 1681: printIntUnsigned.loop1:	divu 	t4, a0, t2		# divide por 10 (quociente) %
00000694 : 02757e33;   % 1682: 		remu 	t3, a0, t2			# resto %
00000695 : ffc10113;   % 1683: 		addi 	sp, sp, -4			# aloca espaco na pilha %
00000696 : 01c12023;   % 1684: 		sw 	t3, 0(sp)			# coloca resto na pilha %
00000697 : 01d00533;   % 1685: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000698 : 00130313;   % 1686: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000699 : fe0514e3;   % 1687: 		bne 	a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
0000069a : 00012383;   % 1689: printIntUnsigned.loop2:	lw 	t2, 0(sp)		# le digito da pilha %
0000069b : 00410113;   % 1690: 		addi 	sp, sp, 4			# libera espaco %
0000069c : 03038393;   % 1691: 		addi 	t2, t2, 48			# converte o digito para ascii %
0000069d : 00728023;   % 1692: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
0000069e : 00128293;   % 1693: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
0000069f : fff30313;   % 1694: 		addi 	t1, t1, -1			# decrementa contador de digitos %
000006a0 : fe0314e3;   % 1695: 		bne 	t1, zero, printIntUnsigned.loop2# eh o ultimo? %
000006a1 : 00028023;   % 1696: 		sb 	zero, 0(t0)			# insere \NULL na string %
000006a2 : 0fc10517;   % 1698: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
000006a3 : b5c50513;   % 1698:  %
000006a4 : d44ff0ef;   % 1699: 		jal 	printString			# chama o print string %
000006a5 : 00012083;   % 1701: 		lw 	ra, 0(sp)			# recupera a %
000006a6 : 00410113;   % 1702: 		addi 	sp, sp, 4			# libera espaco %
000006a7 : 00008067;   % 1703: printIntUnsigned.fim:	ret %
END;
